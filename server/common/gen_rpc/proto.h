/* This file is generated by arpcc, do not change manually! */
#ifndef __proto_h__
#define __proto_h__
#include "ProtocolWriter.h"
#include "ProtocolReader.h"
#include "EnumInfo.h"
#include "com.h"
#include "struct.h"
//=============================================================
// service stub Client2Server
class Client2ServerStub
{
public:
	// methods.
	void openvip(VipLevel vl);
	void requestPhoto();
	void ping();
	void sessionlogin(const COM_LoginInfo& info);
	void login(const COM_LoginInfo& info);
	void createPlayer(const std::string& playername,U8 playerTmpId);
	void deletePlayer(const std::string& playername);
	void enterGame(U32 playerInstId);
	void requestBag();
	void requestEmployees();
	void requestStorage(StorageType tp);
	void requestAchievement();
	void initminig();
	void requestCompound();
	void move(F32 x,F32 z);
	void moveToNpc(S32 npcid);
	void moveToNpc2(NpcType type);
	void moveToZone(S32 sceneId,S32 zoneId);
	void autoBattle();
	void stopAutoBattle();
	void stopMove();
	void exitCopy();
	void transforScene(S32 sceneId);
	void sceneLoaded();
	void querySimplePlayerInst(U32 instId);
	void logout();
	void changProp(U32 guid,const std::vector< COM_Addprop >& props);
	void learnSkill(U32 skid);
	void babyLearnSkill(U32 instId,U32 oldSkId,U32 newSkId,U32 newSkLv);
	void forgetSkill(U32 skid);
	void syncOrder(const COM_Order& order);
	void syncOrderTimeout();
	void sendChat(const COM_Chat& content,const std::string& targetName);
	void requestAudio(S32 audioId);
	void publishItemInst(ItemContainerType type,U32 itemInstId,ChatKind chatType,const std::string& playerName);
	void queryItemInst(S32 showId);
	void publishbabyInst(ChatKind type,U32 babyInstId,const std::string& playerName);
	void querybabyInst(S32 showId);
	void useItem(U32 slot,U32 target,U32 stack);
	void wearEquipment(U32 target,U32 itemInstId);
	void delEquipment(U32 target,U32 itemInstId);
	void setPlayerFront(bool isFront);
	void setBattlebaby(U32 babyID,bool isBattle);
	void changeBabyName(U32 babyID,const std::string& name);
	void intensifyBaby(U32 babyid);
	void setBattleEmp(U32 empID,EmployeesBattleGroup group,bool isBattle);
	void changeEmpBattleGroup(EmployeesBattleGroup group);
	void requestEvolve(U32 empInstId);
	void requestUpStar(U32 empInstId);
	void requestDelEmp(U32 empInstId);
	void delEmployee(const std::vector< U32 >& emps);
	void onekeyDelEmp();
	void delEmployeeSoul(U32 instid,U32 soulNum);
	void sortBagItem();
	void sellBagItem(U32 instId,U32 stack);
	void depositItemToStorage(U32 instid);
	void depositBabyToStorage(U32 instid);
	void storageItemToBag(U32 instid);
	void storageBabyToPlayer(U32 instid);
	void sortStorage(StorageType tp);
	void delStorageBaby(U32 instid);
	void jointLobby();
	void exitLobby();
	void createTeam(const COM_CreateTeamInfo& cti);
	void changeTeam(const COM_CreateTeamInfo& info);
	void kickTeamMember(U32 uuid);
	void changeTeamLeader(U32 uuid);
	void joinTeam(U32 teamId,const std::string& pwd);
	void exitTeam();
	void changeTeamPassword(const std::string& pwd);
	void joinTeamRoom();
	void inviteTeamMember(const std::string& name);
	void isjoinTeam(U32 teamId,bool isFlag);
	void leaveTeam();
	void backTeam();
	void refuseBackTeam();
	void teamCallMember(S32 playerId);
	void requestJoinTeam(const std::string& targetName);
	void ratifyJoinTeam(const std::string& sendName);
	void drawLotteryBox(BoxType type,bool isFree);
	void acceptQuest(S32 questId);
	void submitQuest(S32 npcId,S32 questId);
	void giveupQuest(S32 questId);
	void requestContactInfoById(U32 instId);
	void requestContactInfoByName(const std::string& instName);
	void requestFriendList();
	void addFriend(U32 instId);
	void delFriend(U32 instId);
	void addBlacklist(U32 instId);
	void delBlacklist(U32 instId);
	void requestReferrFriend();
	void mining(S32 gatherId,S32 times);
	void compoundItem(S32 itemId,S32 gemId);
	void bagItemSplit(S32 instId,S32 splitNum);
	void requestChallenge(const std::string& name);
	void requestRival();
	void requestMySelfJJCData();
	void requestCheckMsg(const std::string& name);
	void requestMyAllbattleMsg();
	void requestJJCRank();
	void requestLevelRank();
	void requestBabyRank();
	void requestEmpRank();
	void requestPlayerFFRank();
	void queryOnlinePlayerbyName(const std::string& name);
	void queryPlayerbyName(const std::string& name);
	void queryBaby(U32 instId);
	void queryEmployee(U32 instId);
	void guideFinish(U64 guideIdx);
	void enterBattle(S32 battleId);
	void shopBuyItem(S32 id,S32 num);
	void getFirstRechargeItem();
	void requestLevelGift(S32 level);
	void setCurrentTitle(S32 title);
	void openBuyBox();
	void requestAchaward(S32 achId);
	void sign(S32 index);
	void requestSignupReward7();
	void requestSignupReward14();
	void requestSignupReward28();
	void requestActivityReward(S32 index);
	void resetHundredTier();
	void enterHundredScene(S32 level);
	void delBaby(S32 instId);
	void resetBaby(S32 instId);
	void resetBabyProp(S32 instId);
	void remouldBaby(S32 instid);
	void empSkillLevelUp(U32 empId,S32 skillId);
	void setOpenDoubleTimeFlag(bool isFlag);
	void talkedNpc(S32 npcId);
	void jjcBattleGo(U32 id);
	void requestMyJJCTeamMsg();
	void startMatching();
	void stopMatching();
	void exitPvpJJC();
	void joinPvpLobby();
	void exitPvpLobby();
	void requestpvprank();
	void joinWarriorchoose();
	void warriorStart();
	void warriorStop();
	void sendMail(const std::string& playername,const std::string& title,const std::string& content);
	void readMail(S32 mailId);
	void delMail(S32 mailId);
	void getMailItem(S32 mailId);
	void requestState();
	void createGuild(const std::string& guildName);
	void delGuild(U32 guildId);
	void requestJoinGuild(U32 guid);
	void leaveGuild();
	void kickOut(S32 guid);
	void acceptRequestGuild(S32 playerId);
	void refuseRequestGuild(S32 playerId);
	void changeMemberPosition(S32 targetId,GuildJob job);
	void transferPremier(S32 targetId);
	void changeGuildNotice(const std::string& notice);
	void queryGuildList(S16 page);
	void inviteJoinGuild(const std::string& playerName);
	void respondInviteJoinGuild(const std::string& sendName);
	void buyGuildItem(S32 tableId,S32 times);
	void entryGuildBattle();
	void transforGuildBattleScene();
	void addGuildMoney(S32 money);
	void updateGuildBuiling(GuildBuildingType gbt);
	void refreshGuildShop();
	void levelupGuildSkill(S32 skId);
	void presentGuildItem(S32 num);
	void progenitusAddExp(S32 monsterId,bool isSuper);
	void setProgenitusPosition(S32 mId,S32 pos);
	void guildsign();
	void fetchSelling(const COM_SearchContext& context);
	void fetchSelling2(const COM_SearchContext& context);
	void selling(S32 iteminstid,S32 babyinstid,S32 price);
	void unselling(S32 sellid);
	void buy(S32 sellid);
	void fixItem(S32 instId,FixType type);
	void fixAllItem(const std::vector< U32 >& items,FixType type);
	void makeDebirsItem(S32 instId,S32 num);
	void levelUpMagicItem(const std::vector< U32 >& items);
	void tupoMagicItem(S32 level);
	void changeMagicJob(JobType job);
	void requestPk(U32 playerId);
	void uiBehavior(UIBehaviorType type);
	void openZhuanpan();
	void zhuanpanGo(U32 counter);
	void redemptionSpree(const std::string& code);
	void sceneFilter(const std::vector< SceneFilterType >& sfType);
	void sendExamAnswer(U32 questionId,U8 answer);
	void sendwishing(const COM_Wishing& wish);
	void requestWish();
	void leaderCloseDialog();
	void requestOnlineReward(U32 index);
	void requestFundReward(U32 level);
	void openCard(U16 index);
	void resetCard();
	void hotRoleBuy();
	void requestSevenReward(U32 qid);
	void vipreward();
	void requestChargeTotalSingleReward(U32 index);
	void requestChargeTotalReward(U32 index);
	void requestChargeEverySingleReward(U32 index);
	void requestChargeEveryReward(U32 index);
	void requestLoginTotal(U32 index);
	void buyDiscountStoreSingle(S32 itemId,S32 itemStack);
	void buyDiscountStore(S32 itemId,S32 itemStack);
	void requestEmployeeActivityReward(U32 index);
	void requestmyselfrechargeleReward(U32 index);
	void requestEverydayIntegral();
	void buyIntegralItem(U32 id,U32 num);
	void familyLoseLeader();
	void verificationSMS(const std::string& phoneNumber,const std::string& code);
	void lockItem(S32 instId,bool isLock);
	void lockBaby(S32 instId,bool isLock);
	void showBaby(S32 instId);
	void wearFuwen(S32 itemInstId);
	void takeoffFuwen(S32 slotId);
	void compFuwen(S32 itemInstId);
	void requestEmployeeQuest();
	void acceptEmployeeQuest(S32 questId,const std::vector< S32 >& employees);
	void submitEmployeeQuest(S32 questId);
	void crystalUpLevel();
	void resetCrystalProp(const std::vector< S32 >& locklist);
	void magicItemOneKeyLevel();
	void submitQuest2(S32 npcId,S32 questId,S32 instId);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy Client2Server
class Client2ServerProxy
{
public:
	// methods.
	virtual bool openvip(VipLevel vl) = 0;
	virtual bool requestPhoto() = 0;
	virtual bool ping() = 0;
	virtual bool sessionlogin(COM_LoginInfo& info) = 0;
	virtual bool login(COM_LoginInfo& info) = 0;
	virtual bool createPlayer(std::string& playername, U8 playerTmpId) = 0;
	virtual bool deletePlayer(std::string& playername) = 0;
	virtual bool enterGame(U32 playerInstId) = 0;
	virtual bool requestBag() = 0;
	virtual bool requestEmployees() = 0;
	virtual bool requestStorage(StorageType tp) = 0;
	virtual bool requestAchievement() = 0;
	virtual bool initminig() = 0;
	virtual bool requestCompound() = 0;
	virtual bool move(F32 x, F32 z) = 0;
	virtual bool moveToNpc(S32 npcid) = 0;
	virtual bool moveToNpc2(NpcType type) = 0;
	virtual bool moveToZone(S32 sceneId, S32 zoneId) = 0;
	virtual bool autoBattle() = 0;
	virtual bool stopAutoBattle() = 0;
	virtual bool stopMove() = 0;
	virtual bool exitCopy() = 0;
	virtual bool transforScene(S32 sceneId) = 0;
	virtual bool sceneLoaded() = 0;
	virtual bool querySimplePlayerInst(U32 instId) = 0;
	virtual bool logout() = 0;
	virtual bool changProp(U32 guid, std::vector< COM_Addprop >& props) = 0;
	virtual bool learnSkill(U32 skid) = 0;
	virtual bool babyLearnSkill(U32 instId, U32 oldSkId, U32 newSkId, U32 newSkLv) = 0;
	virtual bool forgetSkill(U32 skid) = 0;
	virtual bool syncOrder(COM_Order& order) = 0;
	virtual bool syncOrderTimeout() = 0;
	virtual bool sendChat(COM_Chat& content, std::string& targetName) = 0;
	virtual bool requestAudio(S32 audioId) = 0;
	virtual bool publishItemInst(ItemContainerType type, U32 itemInstId, ChatKind chatType, std::string& playerName) = 0;
	virtual bool queryItemInst(S32 showId) = 0;
	virtual bool publishbabyInst(ChatKind type, U32 babyInstId, std::string& playerName) = 0;
	virtual bool querybabyInst(S32 showId) = 0;
	virtual bool useItem(U32 slot, U32 target, U32 stack) = 0;
	virtual bool wearEquipment(U32 target, U32 itemInstId) = 0;
	virtual bool delEquipment(U32 target, U32 itemInstId) = 0;
	virtual bool setPlayerFront(bool isFront) = 0;
	virtual bool setBattlebaby(U32 babyID, bool isBattle) = 0;
	virtual bool changeBabyName(U32 babyID, std::string& name) = 0;
	virtual bool intensifyBaby(U32 babyid) = 0;
	virtual bool setBattleEmp(U32 empID, EmployeesBattleGroup group, bool isBattle) = 0;
	virtual bool changeEmpBattleGroup(EmployeesBattleGroup group) = 0;
	virtual bool requestEvolve(U32 empInstId) = 0;
	virtual bool requestUpStar(U32 empInstId) = 0;
	virtual bool requestDelEmp(U32 empInstId) = 0;
	virtual bool delEmployee(std::vector< U32 >& emps) = 0;
	virtual bool onekeyDelEmp() = 0;
	virtual bool delEmployeeSoul(U32 instid, U32 soulNum) = 0;
	virtual bool sortBagItem() = 0;
	virtual bool sellBagItem(U32 instId, U32 stack) = 0;
	virtual bool depositItemToStorage(U32 instid) = 0;
	virtual bool depositBabyToStorage(U32 instid) = 0;
	virtual bool storageItemToBag(U32 instid) = 0;
	virtual bool storageBabyToPlayer(U32 instid) = 0;
	virtual bool sortStorage(StorageType tp) = 0;
	virtual bool delStorageBaby(U32 instid) = 0;
	virtual bool jointLobby() = 0;
	virtual bool exitLobby() = 0;
	virtual bool createTeam(COM_CreateTeamInfo& cti) = 0;
	virtual bool changeTeam(COM_CreateTeamInfo& info) = 0;
	virtual bool kickTeamMember(U32 uuid) = 0;
	virtual bool changeTeamLeader(U32 uuid) = 0;
	virtual bool joinTeam(U32 teamId, std::string& pwd) = 0;
	virtual bool exitTeam() = 0;
	virtual bool changeTeamPassword(std::string& pwd) = 0;
	virtual bool joinTeamRoom() = 0;
	virtual bool inviteTeamMember(std::string& name) = 0;
	virtual bool isjoinTeam(U32 teamId, bool isFlag) = 0;
	virtual bool leaveTeam() = 0;
	virtual bool backTeam() = 0;
	virtual bool refuseBackTeam() = 0;
	virtual bool teamCallMember(S32 playerId) = 0;
	virtual bool requestJoinTeam(std::string& targetName) = 0;
	virtual bool ratifyJoinTeam(std::string& sendName) = 0;
	virtual bool drawLotteryBox(BoxType type, bool isFree) = 0;
	virtual bool acceptQuest(S32 questId) = 0;
	virtual bool submitQuest(S32 npcId, S32 questId) = 0;
	virtual bool giveupQuest(S32 questId) = 0;
	virtual bool requestContactInfoById(U32 instId) = 0;
	virtual bool requestContactInfoByName(std::string& instName) = 0;
	virtual bool requestFriendList() = 0;
	virtual bool addFriend(U32 instId) = 0;
	virtual bool delFriend(U32 instId) = 0;
	virtual bool addBlacklist(U32 instId) = 0;
	virtual bool delBlacklist(U32 instId) = 0;
	virtual bool requestReferrFriend() = 0;
	virtual bool mining(S32 gatherId, S32 times) = 0;
	virtual bool compoundItem(S32 itemId, S32 gemId) = 0;
	virtual bool bagItemSplit(S32 instId, S32 splitNum) = 0;
	virtual bool requestChallenge(std::string& name) = 0;
	virtual bool requestRival() = 0;
	virtual bool requestMySelfJJCData() = 0;
	virtual bool requestCheckMsg(std::string& name) = 0;
	virtual bool requestMyAllbattleMsg() = 0;
	virtual bool requestJJCRank() = 0;
	virtual bool requestLevelRank() = 0;
	virtual bool requestBabyRank() = 0;
	virtual bool requestEmpRank() = 0;
	virtual bool requestPlayerFFRank() = 0;
	virtual bool queryOnlinePlayerbyName(std::string& name) = 0;
	virtual bool queryPlayerbyName(std::string& name) = 0;
	virtual bool queryBaby(U32 instId) = 0;
	virtual bool queryEmployee(U32 instId) = 0;
	virtual bool guideFinish(U64 guideIdx) = 0;
	virtual bool enterBattle(S32 battleId) = 0;
	virtual bool shopBuyItem(S32 id, S32 num) = 0;
	virtual bool getFirstRechargeItem() = 0;
	virtual bool requestLevelGift(S32 level) = 0;
	virtual bool setCurrentTitle(S32 title) = 0;
	virtual bool openBuyBox() = 0;
	virtual bool requestAchaward(S32 achId) = 0;
	virtual bool sign(S32 index) = 0;
	virtual bool requestSignupReward7() = 0;
	virtual bool requestSignupReward14() = 0;
	virtual bool requestSignupReward28() = 0;
	virtual bool requestActivityReward(S32 index) = 0;
	virtual bool resetHundredTier() = 0;
	virtual bool enterHundredScene(S32 level) = 0;
	virtual bool delBaby(S32 instId) = 0;
	virtual bool resetBaby(S32 instId) = 0;
	virtual bool resetBabyProp(S32 instId) = 0;
	virtual bool remouldBaby(S32 instid) = 0;
	virtual bool empSkillLevelUp(U32 empId, S32 skillId) = 0;
	virtual bool setOpenDoubleTimeFlag(bool isFlag) = 0;
	virtual bool talkedNpc(S32 npcId) = 0;
	virtual bool jjcBattleGo(U32 id) = 0;
	virtual bool requestMyJJCTeamMsg() = 0;
	virtual bool startMatching() = 0;
	virtual bool stopMatching() = 0;
	virtual bool exitPvpJJC() = 0;
	virtual bool joinPvpLobby() = 0;
	virtual bool exitPvpLobby() = 0;
	virtual bool requestpvprank() = 0;
	virtual bool joinWarriorchoose() = 0;
	virtual bool warriorStart() = 0;
	virtual bool warriorStop() = 0;
	virtual bool sendMail(std::string& playername, std::string& title, std::string& content) = 0;
	virtual bool readMail(S32 mailId) = 0;
	virtual bool delMail(S32 mailId) = 0;
	virtual bool getMailItem(S32 mailId) = 0;
	virtual bool requestState() = 0;
	virtual bool createGuild(std::string& guildName) = 0;
	virtual bool delGuild(U32 guildId) = 0;
	virtual bool requestJoinGuild(U32 guid) = 0;
	virtual bool leaveGuild() = 0;
	virtual bool kickOut(S32 guid) = 0;
	virtual bool acceptRequestGuild(S32 playerId) = 0;
	virtual bool refuseRequestGuild(S32 playerId) = 0;
	virtual bool changeMemberPosition(S32 targetId, GuildJob job) = 0;
	virtual bool transferPremier(S32 targetId) = 0;
	virtual bool changeGuildNotice(std::string& notice) = 0;
	virtual bool queryGuildList(S16 page) = 0;
	virtual bool inviteJoinGuild(std::string& playerName) = 0;
	virtual bool respondInviteJoinGuild(std::string& sendName) = 0;
	virtual bool buyGuildItem(S32 tableId, S32 times) = 0;
	virtual bool entryGuildBattle() = 0;
	virtual bool transforGuildBattleScene() = 0;
	virtual bool addGuildMoney(S32 money) = 0;
	virtual bool updateGuildBuiling(GuildBuildingType gbt) = 0;
	virtual bool refreshGuildShop() = 0;
	virtual bool levelupGuildSkill(S32 skId) = 0;
	virtual bool presentGuildItem(S32 num) = 0;
	virtual bool progenitusAddExp(S32 monsterId, bool isSuper) = 0;
	virtual bool setProgenitusPosition(S32 mId, S32 pos) = 0;
	virtual bool guildsign() = 0;
	virtual bool fetchSelling(COM_SearchContext& context) = 0;
	virtual bool fetchSelling2(COM_SearchContext& context) = 0;
	virtual bool selling(S32 iteminstid, S32 babyinstid, S32 price) = 0;
	virtual bool unselling(S32 sellid) = 0;
	virtual bool buy(S32 sellid) = 0;
	virtual bool fixItem(S32 instId, FixType type) = 0;
	virtual bool fixAllItem(std::vector< U32 >& items, FixType type) = 0;
	virtual bool makeDebirsItem(S32 instId, S32 num) = 0;
	virtual bool levelUpMagicItem(std::vector< U32 >& items) = 0;
	virtual bool tupoMagicItem(S32 level) = 0;
	virtual bool changeMagicJob(JobType job) = 0;
	virtual bool requestPk(U32 playerId) = 0;
	virtual bool uiBehavior(UIBehaviorType type) = 0;
	virtual bool openZhuanpan() = 0;
	virtual bool zhuanpanGo(U32 counter) = 0;
	virtual bool redemptionSpree(std::string& code) = 0;
	virtual bool sceneFilter(std::vector< SceneFilterType >& sfType) = 0;
	virtual bool sendExamAnswer(U32 questionId, U8 answer) = 0;
	virtual bool sendwishing(COM_Wishing& wish) = 0;
	virtual bool requestWish() = 0;
	virtual bool leaderCloseDialog() = 0;
	virtual bool requestOnlineReward(U32 index) = 0;
	virtual bool requestFundReward(U32 level) = 0;
	virtual bool openCard(U16 index) = 0;
	virtual bool resetCard() = 0;
	virtual bool hotRoleBuy() = 0;
	virtual bool requestSevenReward(U32 qid) = 0;
	virtual bool vipreward() = 0;
	virtual bool requestChargeTotalSingleReward(U32 index) = 0;
	virtual bool requestChargeTotalReward(U32 index) = 0;
	virtual bool requestChargeEverySingleReward(U32 index) = 0;
	virtual bool requestChargeEveryReward(U32 index) = 0;
	virtual bool requestLoginTotal(U32 index) = 0;
	virtual bool buyDiscountStoreSingle(S32 itemId, S32 itemStack) = 0;
	virtual bool buyDiscountStore(S32 itemId, S32 itemStack) = 0;
	virtual bool requestEmployeeActivityReward(U32 index) = 0;
	virtual bool requestmyselfrechargeleReward(U32 index) = 0;
	virtual bool requestEverydayIntegral() = 0;
	virtual bool buyIntegralItem(U32 id, U32 num) = 0;
	virtual bool familyLoseLeader() = 0;
	virtual bool verificationSMS(std::string& phoneNumber, std::string& code) = 0;
	virtual bool lockItem(S32 instId, bool isLock) = 0;
	virtual bool lockBaby(S32 instId, bool isLock) = 0;
	virtual bool showBaby(S32 instId) = 0;
	virtual bool wearFuwen(S32 itemInstId) = 0;
	virtual bool takeoffFuwen(S32 slotId) = 0;
	virtual bool compFuwen(S32 itemInstId) = 0;
	virtual bool requestEmployeeQuest() = 0;
	virtual bool acceptEmployeeQuest(S32 questId, std::vector< S32 >& employees) = 0;
	virtual bool submitEmployeeQuest(S32 questId) = 0;
	virtual bool crystalUpLevel() = 0;
	virtual bool resetCrystalProp(std::vector< S32 >& locklist) = 0;
	virtual bool magicItemOneKeyLevel() = 0;
	virtual bool submitQuest2(S32 npcId, S32 questId, S32 instId) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool openvip(ProtocolReader* r);
	bool requestPhoto(ProtocolReader* r);
	bool ping(ProtocolReader* r);
	bool sessionlogin(ProtocolReader* r);
	bool login(ProtocolReader* r);
	bool createPlayer(ProtocolReader* r);
	bool deletePlayer(ProtocolReader* r);
	bool enterGame(ProtocolReader* r);
	bool requestBag(ProtocolReader* r);
	bool requestEmployees(ProtocolReader* r);
	bool requestStorage(ProtocolReader* r);
	bool requestAchievement(ProtocolReader* r);
	bool initminig(ProtocolReader* r);
	bool requestCompound(ProtocolReader* r);
	bool move(ProtocolReader* r);
	bool moveToNpc(ProtocolReader* r);
	bool moveToNpc2(ProtocolReader* r);
	bool moveToZone(ProtocolReader* r);
	bool autoBattle(ProtocolReader* r);
	bool stopAutoBattle(ProtocolReader* r);
	bool stopMove(ProtocolReader* r);
	bool exitCopy(ProtocolReader* r);
	bool transforScene(ProtocolReader* r);
	bool sceneLoaded(ProtocolReader* r);
	bool querySimplePlayerInst(ProtocolReader* r);
	bool logout(ProtocolReader* r);
	bool changProp(ProtocolReader* r);
	bool learnSkill(ProtocolReader* r);
	bool babyLearnSkill(ProtocolReader* r);
	bool forgetSkill(ProtocolReader* r);
	bool syncOrder(ProtocolReader* r);
	bool syncOrderTimeout(ProtocolReader* r);
	bool sendChat(ProtocolReader* r);
	bool requestAudio(ProtocolReader* r);
	bool publishItemInst(ProtocolReader* r);
	bool queryItemInst(ProtocolReader* r);
	bool publishbabyInst(ProtocolReader* r);
	bool querybabyInst(ProtocolReader* r);
	bool useItem(ProtocolReader* r);
	bool wearEquipment(ProtocolReader* r);
	bool delEquipment(ProtocolReader* r);
	bool setPlayerFront(ProtocolReader* r);
	bool setBattlebaby(ProtocolReader* r);
	bool changeBabyName(ProtocolReader* r);
	bool intensifyBaby(ProtocolReader* r);
	bool setBattleEmp(ProtocolReader* r);
	bool changeEmpBattleGroup(ProtocolReader* r);
	bool requestEvolve(ProtocolReader* r);
	bool requestUpStar(ProtocolReader* r);
	bool requestDelEmp(ProtocolReader* r);
	bool delEmployee(ProtocolReader* r);
	bool onekeyDelEmp(ProtocolReader* r);
	bool delEmployeeSoul(ProtocolReader* r);
	bool sortBagItem(ProtocolReader* r);
	bool sellBagItem(ProtocolReader* r);
	bool depositItemToStorage(ProtocolReader* r);
	bool depositBabyToStorage(ProtocolReader* r);
	bool storageItemToBag(ProtocolReader* r);
	bool storageBabyToPlayer(ProtocolReader* r);
	bool sortStorage(ProtocolReader* r);
	bool delStorageBaby(ProtocolReader* r);
	bool jointLobby(ProtocolReader* r);
	bool exitLobby(ProtocolReader* r);
	bool createTeam(ProtocolReader* r);
	bool changeTeam(ProtocolReader* r);
	bool kickTeamMember(ProtocolReader* r);
	bool changeTeamLeader(ProtocolReader* r);
	bool joinTeam(ProtocolReader* r);
	bool exitTeam(ProtocolReader* r);
	bool changeTeamPassword(ProtocolReader* r);
	bool joinTeamRoom(ProtocolReader* r);
	bool inviteTeamMember(ProtocolReader* r);
	bool isjoinTeam(ProtocolReader* r);
	bool leaveTeam(ProtocolReader* r);
	bool backTeam(ProtocolReader* r);
	bool refuseBackTeam(ProtocolReader* r);
	bool teamCallMember(ProtocolReader* r);
	bool requestJoinTeam(ProtocolReader* r);
	bool ratifyJoinTeam(ProtocolReader* r);
	bool drawLotteryBox(ProtocolReader* r);
	bool acceptQuest(ProtocolReader* r);
	bool submitQuest(ProtocolReader* r);
	bool giveupQuest(ProtocolReader* r);
	bool requestContactInfoById(ProtocolReader* r);
	bool requestContactInfoByName(ProtocolReader* r);
	bool requestFriendList(ProtocolReader* r);
	bool addFriend(ProtocolReader* r);
	bool delFriend(ProtocolReader* r);
	bool addBlacklist(ProtocolReader* r);
	bool delBlacklist(ProtocolReader* r);
	bool requestReferrFriend(ProtocolReader* r);
	bool mining(ProtocolReader* r);
	bool compoundItem(ProtocolReader* r);
	bool bagItemSplit(ProtocolReader* r);
	bool requestChallenge(ProtocolReader* r);
	bool requestRival(ProtocolReader* r);
	bool requestMySelfJJCData(ProtocolReader* r);
	bool requestCheckMsg(ProtocolReader* r);
	bool requestMyAllbattleMsg(ProtocolReader* r);
	bool requestJJCRank(ProtocolReader* r);
	bool requestLevelRank(ProtocolReader* r);
	bool requestBabyRank(ProtocolReader* r);
	bool requestEmpRank(ProtocolReader* r);
	bool requestPlayerFFRank(ProtocolReader* r);
	bool queryOnlinePlayerbyName(ProtocolReader* r);
	bool queryPlayerbyName(ProtocolReader* r);
	bool queryBaby(ProtocolReader* r);
	bool queryEmployee(ProtocolReader* r);
	bool guideFinish(ProtocolReader* r);
	bool enterBattle(ProtocolReader* r);
	bool shopBuyItem(ProtocolReader* r);
	bool getFirstRechargeItem(ProtocolReader* r);
	bool requestLevelGift(ProtocolReader* r);
	bool setCurrentTitle(ProtocolReader* r);
	bool openBuyBox(ProtocolReader* r);
	bool requestAchaward(ProtocolReader* r);
	bool sign(ProtocolReader* r);
	bool requestSignupReward7(ProtocolReader* r);
	bool requestSignupReward14(ProtocolReader* r);
	bool requestSignupReward28(ProtocolReader* r);
	bool requestActivityReward(ProtocolReader* r);
	bool resetHundredTier(ProtocolReader* r);
	bool enterHundredScene(ProtocolReader* r);
	bool delBaby(ProtocolReader* r);
	bool resetBaby(ProtocolReader* r);
	bool resetBabyProp(ProtocolReader* r);
	bool remouldBaby(ProtocolReader* r);
	bool empSkillLevelUp(ProtocolReader* r);
	bool setOpenDoubleTimeFlag(ProtocolReader* r);
	bool talkedNpc(ProtocolReader* r);
	bool jjcBattleGo(ProtocolReader* r);
	bool requestMyJJCTeamMsg(ProtocolReader* r);
	bool startMatching(ProtocolReader* r);
	bool stopMatching(ProtocolReader* r);
	bool exitPvpJJC(ProtocolReader* r);
	bool joinPvpLobby(ProtocolReader* r);
	bool exitPvpLobby(ProtocolReader* r);
	bool requestpvprank(ProtocolReader* r);
	bool joinWarriorchoose(ProtocolReader* r);
	bool warriorStart(ProtocolReader* r);
	bool warriorStop(ProtocolReader* r);
	bool sendMail(ProtocolReader* r);
	bool readMail(ProtocolReader* r);
	bool delMail(ProtocolReader* r);
	bool getMailItem(ProtocolReader* r);
	bool requestState(ProtocolReader* r);
	bool createGuild(ProtocolReader* r);
	bool delGuild(ProtocolReader* r);
	bool requestJoinGuild(ProtocolReader* r);
	bool leaveGuild(ProtocolReader* r);
	bool kickOut(ProtocolReader* r);
	bool acceptRequestGuild(ProtocolReader* r);
	bool refuseRequestGuild(ProtocolReader* r);
	bool changeMemberPosition(ProtocolReader* r);
	bool transferPremier(ProtocolReader* r);
	bool changeGuildNotice(ProtocolReader* r);
	bool queryGuildList(ProtocolReader* r);
	bool inviteJoinGuild(ProtocolReader* r);
	bool respondInviteJoinGuild(ProtocolReader* r);
	bool buyGuildItem(ProtocolReader* r);
	bool entryGuildBattle(ProtocolReader* r);
	bool transforGuildBattleScene(ProtocolReader* r);
	bool addGuildMoney(ProtocolReader* r);
	bool updateGuildBuiling(ProtocolReader* r);
	bool refreshGuildShop(ProtocolReader* r);
	bool levelupGuildSkill(ProtocolReader* r);
	bool presentGuildItem(ProtocolReader* r);
	bool progenitusAddExp(ProtocolReader* r);
	bool setProgenitusPosition(ProtocolReader* r);
	bool guildsign(ProtocolReader* r);
	bool fetchSelling(ProtocolReader* r);
	bool fetchSelling2(ProtocolReader* r);
	bool selling(ProtocolReader* r);
	bool unselling(ProtocolReader* r);
	bool buy(ProtocolReader* r);
	bool fixItem(ProtocolReader* r);
	bool fixAllItem(ProtocolReader* r);
	bool makeDebirsItem(ProtocolReader* r);
	bool levelUpMagicItem(ProtocolReader* r);
	bool tupoMagicItem(ProtocolReader* r);
	bool changeMagicJob(ProtocolReader* r);
	bool requestPk(ProtocolReader* r);
	bool uiBehavior(ProtocolReader* r);
	bool openZhuanpan(ProtocolReader* r);
	bool zhuanpanGo(ProtocolReader* r);
	bool redemptionSpree(ProtocolReader* r);
	bool sceneFilter(ProtocolReader* r);
	bool sendExamAnswer(ProtocolReader* r);
	bool sendwishing(ProtocolReader* r);
	bool requestWish(ProtocolReader* r);
	bool leaderCloseDialog(ProtocolReader* r);
	bool requestOnlineReward(ProtocolReader* r);
	bool requestFundReward(ProtocolReader* r);
	bool openCard(ProtocolReader* r);
	bool resetCard(ProtocolReader* r);
	bool hotRoleBuy(ProtocolReader* r);
	bool requestSevenReward(ProtocolReader* r);
	bool vipreward(ProtocolReader* r);
	bool requestChargeTotalSingleReward(ProtocolReader* r);
	bool requestChargeTotalReward(ProtocolReader* r);
	bool requestChargeEverySingleReward(ProtocolReader* r);
	bool requestChargeEveryReward(ProtocolReader* r);
	bool requestLoginTotal(ProtocolReader* r);
	bool buyDiscountStoreSingle(ProtocolReader* r);
	bool buyDiscountStore(ProtocolReader* r);
	bool requestEmployeeActivityReward(ProtocolReader* r);
	bool requestmyselfrechargeleReward(ProtocolReader* r);
	bool requestEverydayIntegral(ProtocolReader* r);
	bool buyIntegralItem(ProtocolReader* r);
	bool familyLoseLeader(ProtocolReader* r);
	bool verificationSMS(ProtocolReader* r);
	bool lockItem(ProtocolReader* r);
	bool lockBaby(ProtocolReader* r);
	bool showBaby(ProtocolReader* r);
	bool wearFuwen(ProtocolReader* r);
	bool takeoffFuwen(ProtocolReader* r);
	bool compFuwen(ProtocolReader* r);
	bool requestEmployeeQuest(ProtocolReader* r);
	bool acceptEmployeeQuest(ProtocolReader* r);
	bool submitEmployeeQuest(ProtocolReader* r);
	bool crystalUpLevel(ProtocolReader* r);
	bool resetCrystalProp(ProtocolReader* r);
	bool magicItemOneKeyLevel(ProtocolReader* r);
	bool submitQuest2(ProtocolReader* r);
};
//=============================================================
// service stub Server2Client
class Server2ClientStub
{
public:
	// methods.
	void pong();
	void errorno(ErrorNo e);
	void teamerrorno(const std::string& name,ErrorNo e);
	void reconnection(const COM_ReconnectInfo& recInfo);
	void sessionfailed();
	void loginok(const std::string& sessionkey,const std::vector< COM_SimpleInformation >& players);
	void logoutOk();
	void createPlayerOk(const COM_SimpleInformation& player);
	void deletePlayerOk(const std::string& name);
	void enterGameOk(const COM_PlayerInst& inst);
	void initBabies(const std::vector< COM_BabyInst >& insts);
	void initEmployees(const std::vector< COM_EmployeeInst >& insts,bool isFlag);
	void initEmpBattleGroup(const COM_BattleEmp& bep);
	void initNpc(const std::vector< S32 >& npcList);
	void initAchievement(const std::vector< COM_Achievement >& actlist);
	void initGather(U32 allnum,const std::vector< COM_Gather >& gathers);
	void initcompound(const std::vector< U32 >& compounds);
	void addBaby(const COM_BabyInst& inst);
	void refreshBaby(const COM_BabyInst& inst);
	void delBabyOK(U32 babyInstId);
	void changeBabyNameOK(U32 babyId,const std::string& name);
	void remouldBabyOK(U32 instid);
	void intensifyBabyOK(U32 babyid,U32 intensifyLevel);
	void learnSkillOk(const COM_Skill& inst);
	void forgetSkillOk(U32 skid);
	void addSkillExp(U32 skid,U32 uExp,ItemUseFlag flag);
	void babyLearnSkillOK(U32 instId,U32 newSkId);
	void skillLevelUp(U32 instId,const COM_Skill& inst);
	void joinScene(const COM_SceneInfo& info);
	void joinCopySceneOK(S32 secneid);
	void initCopyNums();
	void addToScene(const COM_ScenePlayerInformation& inst);
	void delFormScene(S32 instId);
	void move2(S32 instId,const COM_FPosition& pos);
	void cantMove();
	void querySimplePlayerInstOk(const COM_SimplePlayerInst& player);
	void transfor2(S32 instId,const COM_FPosition& pos);
	void openScene(S32 sceneId);
	void autoBattleResult(bool isOk);
	void talked2Npc(S32 npcId);
	void talked2Player(S32 playerId);
	void useItemOk(S32 itemId,S32 stack);
	void syncBattleStatus(S32 playerId,bool inBattle);
	void enterBattleOk(const COM_InitBattle& initBattle);
	void exitBattleOk(BattleJudgeType bjt,const COM_BattleOverClearing& init);
	void syncOrderOk(U32 uid);
	void syncOrderOkEX();
	void syncOneTurnAction(const COM_BattleReport& reports);
	void syncProperties(U32 guid,const std::vector< COM_PropValue >& props);
	void receiveChat(const COM_ChatInfo& info,const COM_ContactInfo& myinfo);
	void requestAudioOk(S32 audioId,const std::vector< U8 >& content);
	void publishItemInstRes(const COM_ShowItemInstInfo& info,ChatKind type);
	void queryItemInstRes(const COM_ShowItemInst& item);
	void publishBabyInstRes(const COM_ShowbabyInstInfo& info,ChatKind type);
	void queryBabyInstRes(const COM_ShowbabyInst& inst);
	void setNoTalkTime(F32 t);
	void addNpc(const std::vector< S32 >& npcList);
	void delNpc(const std::vector< S32 >& npcList);
	void setTeamLeader(S32 playerId,bool isLeader);
	void initBag(const std::vector< COM_Item >& items);
	void addBagItem(const COM_Item& item);
	void delBagItem(U16 slot);
	void updateBagItem(const COM_Item& item);
	void depositItemOK(const COM_Item& item);
	void getoutItemOK(U16 slot);
	void depositBabyOK(const COM_BabyInst& baby);
	void getoutBabyOK(U16 slot);
	void sortItemStorageOK(const std::vector< COM_Item >& items);
	void sortBabyStorageOK(const std::vector< U32 >& babys);
	void initItemStorage(U16 gridNum,const std::vector< COM_Item >& items);
	void initBabyStorage(U16 gridNum,const std::vector< COM_BabyInst >& babys);
	void openStorageGrid(StorageType tp,U16 gridNum);
	void delStorageBabyOK(U16 slot);
	void initPlayerEquips(const std::vector< COM_Item >& equips);
	void wearEquipmentOk(U32 target,const COM_Item& equip);
	void scenePlayerWearEquipment(U32 target,U32 itemId);
	void delEquipmentOk(U32 target,U32 itemInstId);
	void scenePlayerDoffEquipment(U32 target,U32 itemId);
	void sortBagItemOk();
	void jointLobbyOk(const std::vector< COM_SimpleTeamInfo >& infos);
	void exitLobbyOk();
	void syncDelLobbyTeam(U32 teamId);
	void syncUpdateLobbyTeam(const COM_SimpleTeamInfo& info);
	void syncAddLobbyTeam(const COM_SimpleTeamInfo& team);
	void createTeamOk(const COM_TeamInfo& team);
	void changeTeamOk(const COM_TeamInfo& team);
	void joinTeamOk(const COM_TeamInfo& team);
	void addTeamMember(const COM_SimplePlayerInst& info);
	void delTeamMember(S32 instId);
	void changeTeamLeaderOk(S32 uuid);
	void exitTeamOk(bool iskick);
	void updateTeam(const COM_TeamInfo& team);
	void joinTeamRoomOK(const COM_TeamInfo& team);
	void inviteJoinTeam(U32 teamId,const std::string& name);
	void syncTeamDirtyProp(S32 guid,const std::vector< COM_PropValue >& props);
	void leaveTeamOk(S32 playerId);
	void backTeamOK(S32 playerId);
	void teamCallMemberBack();
	void refuseBackTeamOk(S32 playerId);
	void requestJoinTeamTranspond(const std::string& reqName);
	void drawLotteryBoxRep(const std::vector< COM_Item >& items);
	void addEmployee(const COM_EmployeeInst& employee);
	void battleEmployee(S32 empId,EmployeesBattleGroup group,bool forbattle);
	void changeEmpBattleGroupOK(EmployeesBattleGroup group);
	void evolveOK(S32 guid,QualityColor qc);
	void upStarOK(S32 guid,S32 star,const COM_Skill& sk);
	void delEmployeeOK(const std::vector< U32 >& instids);
	void sycnEmployeeSoul(S32 guid,U32 soulNum);
	void initQuest(const std::vector< COM_QuestInst >& qlist,const std::vector< S32 >& clist);
	void acceptQuestOk(const COM_QuestInst& inst);
	void submitQuestOk(S32 questId);
	void giveupQuestOk(S32 questId);
	void updateQuestInst(const COM_QuestInst& inst);
	void requestContactInfoOk(const COM_ContactInfo& contact);
	void addFriendOK(const COM_ContactInfo& inst);
	void delFriendOK(U32 instId);
	void addBlacklistOK(const COM_ContactInfo& inst);
	void delBlacklistOK(U32 instId);
	void findFriendFail();
	void referrFriendOK(const std::vector< COM_ContactInfo >& insts);
	void requestFriendListOK(const std::vector< COM_ContactInfo >& insts);
	void lotteryOk(S32 lotteryId,const std::vector< COM_DropItem >& dropItem);
	void openGatherOK(const COM_Gather& gather);
	void miningOk(const std::vector< COM_DropItem >& items,const COM_Gather& gather,U32 gatherNum);
	void openCompound(U32 compoundId);
	void compoundItemOk(const COM_Item& item);
	void openBagGridOk(S32 num);
	void requestChallengeOK(bool isOK);
	void requestMySelfJJCDataOK(const COM_EndlessStair& info);
	void requestRivalOK(const std::vector< COM_EndlessStair >& infos);
	void rivalTimeOK();
	void checkMsgOK(const COM_SimplePlayerInst& inst);
	void requestMyAllbattleMsgOK(const std::vector< COM_JJCBattleMsg >& infos);
	void myBattleMsgOK(const COM_JJCBattleMsg& info);
	void requestJJCRankOK(U32 myRank,const std::vector< COM_EndlessStair >& infos);
	void requestLevelRankOK(U32 myRank,const std::vector< COM_ContactInfo >& infos);
	void requestBabyRankOK(U32 myRank,const std::vector< COM_BabyRankData >& infos);
	void requestEmpRankOK(U32 myRank,const std::vector< COM_EmployeeRankData >& infos);
	void requestPlayerFFRankOK(U32 myRank,const std::vector< COM_ContactInfo >& infos);
	void queryOnlinePlayerOK(bool isOnline);
	void queryPlayerOK(const COM_SimplePlayerInst& inst);
	void queryBabyOK(const COM_BabyInst& inst);
	void queryEmployeeOK(const COM_EmployeeInst& inst);
	void initGuide(U32 guideMask);
	void buyShopItemOk(S32 id);
	void addPlayerTitle(S32 title);
	void delPlayerTitle(S32 title);
	void requestOpenBuyBox(F32 greenTime,F32 blueTime,S32 greenFreeNum);
	void requestGreenBoxTimeOk();
	void requestBlueBoxTimeOk();
	void updateAchievementinfo(const COM_Achievement& achs);
	void syncOpenSystemFlag(U64 flag);
	void requestActivityRewardOK(U32 ar);
	void syncActivity(const COM_ActivityTable& table);
	void updateActivityStatus(ActivityType type,bool open);
	void updateActivityCounter(ActivityType type,S32 counter,S32 reward);
	void syncExam(const COM_Exam& exam);
	void syncExamAnswer(const COM_Answer& answer);
	void petActivityNoNum(const std::string& name);
	void syncHundredInfo(const COM_HundredBattle& hb);
	void initSignUp(const std::vector< S32 >& info,S32 process,bool sign7,bool sign14,bool sign28);
	void signUp(bool flag);
	void requestSignupRewardOk7();
	void requestSignupRewardOk14();
	void requestSignupRewardOk28();
	void sycnDoubleExpTime(bool isFlag,F32 times);
	void sycnStates(const std::vector< COM_State >& states);
	void requestpvprankOK(const std::vector< COM_ContactInfo >& infos);
	void syncMyJJCTeamMember();
	void startMatchingOK();
	void stopMatchingOK(F32 times);
	void updatePvpJJCinfo(const COM_PlayerVsPlayer& info);
	void exitPvpJJCOk();
	void syncEnemyPvpJJCPlayerInfo(const COM_SimpleInformation& info);
	void syncEnemyPvpJJCTeamInfo(const std::vector< COM_SimpleInformation >& infos,U32 teamID_);
	void openWarriorchooseUI();
	void warriorStartOK();
	void warriorStopOK();
	void syncWarriorEnemyTeamInfo(const std::vector< COM_SimpleInformation >& infos,U32 teamID_);
	void appendMail(const std::vector< COM_Mail >& mails);
	void delMail(S32 mailId);
	void updateMailOk(const COM_Mail& mail);
	void boardcastNotice(const std::string& content,bool isGm);
	void createGuildOK();
	void delGuildOK();
	void leaveGuildOk(const std::string& who,bool isKick);
	void initGuildData(const COM_Guild& guild);
	void initGuildMemberList(const std::vector< COM_GuildMember >& member);
	void modifyGuildMemberList(const COM_GuildMember& member,ModifyListFlag flag);
	void modifyGuildList(const COM_GuildViewerData& data,ModifyListFlag flag);
	void queryGuildListResult(S16 page,S16 pageNum,const std::vector< COM_GuildViewerData >& guildList);
	void inviteGuild(const std::string& sendName,const std::string& guildName);
	void updateGuildShopItems(const std::vector< COM_GuildShopItem >& items);
	void updateGuildBuilding(GuildBuildingType type,const COM_GuildBuilding& building);
	void updateGuildMyMember(const COM_GuildMember& member);
	void levelupGuildSkillOk(const COM_Skill& skInst);
	void presentGuildItemOk(S32 val);
	void progenitusAddExpOk(const COM_GuildProgen& mInst);
	void setProgenitusPositionOk(const std::vector< S32 >& positions);
	void updateGuildFundz(S32 val);
	void updateGuildMemberContribution(S32 val);
	void openGuildBattle(const std::string& otherName,S32 playerNum,S32 level,bool isLeft,S32 lstime);
	void startGuildBattle(const std::string& otherName,S32 otherCon,S32 selfCon);
	void closeGuildBattle(bool isWinner);
	void syncGuildBattleWinCount(S32 myWin,S32 otherWin);
	void initMySelling(const std::vector< COM_SellItem >& items);
	void initMySelled(const std::vector< COM_SelledItem >& items);
	void fetchSellingOk(const std::vector< COM_SellItem >& items,S32 total);
	void fetchSellingOk2(const std::vector< COM_SellItem >& items,S32 total);
	void sellingOk(const COM_SellItem& item);
	void selledOk(const COM_SelledItem& item);
	void unsellingOk(S32 sellid);
	void redemptionSpreeOk();
	void insertState(const COM_State& st);
	void updattState(const COM_State& st);
	void removeState(U32 stid);
	void requestFixItemOk(const COM_Item& item);
	void makeDebirsItemOK();
	void updateMagicItem(S32 level,S32 exp);
	void changeMagicJobOk(JobType job);
	void magicItemTupoOk(S32 level);
	void zhuanpanOK(const std::vector< U32 >& pond);
	void updateZhuanpanNotice(const COM_Zhuanpan& zhuanp);
	void sycnZhuanpanData(const COM_ZhuanpanData& data);
	void copynonum(const std::string& name);
	void sceneFilterOk(const std::vector< SceneFilterType >& sfType);
	void wishingOK();
	void shareWishOK(const COM_Wish& wish);
	void leaderCloseDialogOk();
	void startOnlineTime();
	void requestOnlineTimeRewardOK(U32 index);
	void sycnVipflag(bool flag);
	void buyFundOK(bool flag);
	void requestFundRewardOK(U32 level);
	void firstRechargeOK(bool isFlag);
	void firstRechargeGiftOK(bool isFlag);
	void agencyActivity(ADType type,bool isFlag);
	void updateFestival(const COM_ADLoginTotal& festival);
	void updateSelfRecharge(const COM_ADChargeTotal& val);
	void updateSysRecharge(const COM_ADChargeTotal& val);
	void updateSelfDiscountStore(const COM_ADDiscountStore& val);
	void updateSysDiscountStore(const COM_ADDiscountStore& val);
	void updateSelfOnceRecharge(const COM_ADChargeEvery& val);
	void updateSysOnceRecharge(const COM_ADChargeEvery& val);
	void openCardOK(const COM_ADCardsContent& data);
	void resetCardOK();
	void sycnHotRole(const COM_ADHotRole& data);
	void hotRoleBuyOk(U16 buyNum);
	void updateSevenday(const COM_Sevenday& data);
	void updateEmployeeActivity(const COM_ADEmployeeTotal& data);
	void updateMinGiftActivity(const COM_ADGiftBag& data);
	void updateIntegralShop(const COM_IntegralData& data);
	void updateShowBaby(U32 playerId,U32 showBabyTableId,const std::string& showBabyName);
	void updateMySelfRecharge(const COM_ADChargeTotal& val);
	void verificationSMSOk(const std::string& phoneNumber);
	void requestLevelGiftOK(S32 level);
	void sycnConvertExp(S32 val);
	void wearFuwenOk(const COM_Item& inst);
	void takeoffFuwenOk(S32 slot);
	void compFuwenOk();
	void requestEmployeeQuestOk(const std::vector< COM_EmployeeQuestInst >& questList);
	void acceptEmployeeQuestOk(const COM_EmployeeQuestInst& inst);
	void submitEmployeeQuestOk(S32 questId,bool isSuccess);
	void sycnCrystal(const COM_CrystalData& data);
	void crystalUpLeveResult(bool isOK);
	void resetCrystalPropOK();
	void sycnCourseGift(const std::vector< COM_CourseGift >& data);
	void orderOk(const std::string& orderId,S32 shopId);
	void updateRandSubmitQuestCount(S32 submitCount);
	void updateTeamMember(S32 playerId,bool isMember);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy Server2Client
class Server2ClientProxy
{
public:
	// methods.
	virtual bool pong() = 0;
	virtual bool errorno(ErrorNo e) = 0;
	virtual bool teamerrorno(std::string& name, ErrorNo e) = 0;
	virtual bool reconnection(COM_ReconnectInfo& recInfo) = 0;
	virtual bool sessionfailed() = 0;
	virtual bool loginok(std::string& sessionkey, std::vector< COM_SimpleInformation >& players) = 0;
	virtual bool logoutOk() = 0;
	virtual bool createPlayerOk(COM_SimpleInformation& player) = 0;
	virtual bool deletePlayerOk(std::string& name) = 0;
	virtual bool enterGameOk(COM_PlayerInst& inst) = 0;
	virtual bool initBabies(std::vector< COM_BabyInst >& insts) = 0;
	virtual bool initEmployees(std::vector< COM_EmployeeInst >& insts, bool isFlag) = 0;
	virtual bool initEmpBattleGroup(COM_BattleEmp& bep) = 0;
	virtual bool initNpc(std::vector< S32 >& npcList) = 0;
	virtual bool initAchievement(std::vector< COM_Achievement >& actlist) = 0;
	virtual bool initGather(U32 allnum, std::vector< COM_Gather >& gathers) = 0;
	virtual bool initcompound(std::vector< U32 >& compounds) = 0;
	virtual bool addBaby(COM_BabyInst& inst) = 0;
	virtual bool refreshBaby(COM_BabyInst& inst) = 0;
	virtual bool delBabyOK(U32 babyInstId) = 0;
	virtual bool changeBabyNameOK(U32 babyId, std::string& name) = 0;
	virtual bool remouldBabyOK(U32 instid) = 0;
	virtual bool intensifyBabyOK(U32 babyid, U32 intensifyLevel) = 0;
	virtual bool learnSkillOk(COM_Skill& inst) = 0;
	virtual bool forgetSkillOk(U32 skid) = 0;
	virtual bool addSkillExp(U32 skid, U32 uExp, ItemUseFlag flag) = 0;
	virtual bool babyLearnSkillOK(U32 instId, U32 newSkId) = 0;
	virtual bool skillLevelUp(U32 instId, COM_Skill& inst) = 0;
	virtual bool joinScene(COM_SceneInfo& info) = 0;
	virtual bool joinCopySceneOK(S32 secneid) = 0;
	virtual bool initCopyNums() = 0;
	virtual bool addToScene(COM_ScenePlayerInformation& inst) = 0;
	virtual bool delFormScene(S32 instId) = 0;
	virtual bool move2(S32 instId, COM_FPosition& pos) = 0;
	virtual bool cantMove() = 0;
	virtual bool querySimplePlayerInstOk(COM_SimplePlayerInst& player) = 0;
	virtual bool transfor2(S32 instId, COM_FPosition& pos) = 0;
	virtual bool openScene(S32 sceneId) = 0;
	virtual bool autoBattleResult(bool isOk) = 0;
	virtual bool talked2Npc(S32 npcId) = 0;
	virtual bool talked2Player(S32 playerId) = 0;
	virtual bool useItemOk(S32 itemId, S32 stack) = 0;
	virtual bool syncBattleStatus(S32 playerId, bool inBattle) = 0;
	virtual bool enterBattleOk(COM_InitBattle& initBattle) = 0;
	virtual bool exitBattleOk(BattleJudgeType bjt, COM_BattleOverClearing& init) = 0;
	virtual bool syncOrderOk(U32 uid) = 0;
	virtual bool syncOrderOkEX() = 0;
	virtual bool syncOneTurnAction(COM_BattleReport& reports) = 0;
	virtual bool syncProperties(U32 guid, std::vector< COM_PropValue >& props) = 0;
	virtual bool receiveChat(COM_ChatInfo& info, COM_ContactInfo& myinfo) = 0;
	virtual bool requestAudioOk(S32 audioId, std::vector< U8 >& content) = 0;
	virtual bool publishItemInstRes(COM_ShowItemInstInfo& info, ChatKind type) = 0;
	virtual bool queryItemInstRes(COM_ShowItemInst& item) = 0;
	virtual bool publishBabyInstRes(COM_ShowbabyInstInfo& info, ChatKind type) = 0;
	virtual bool queryBabyInstRes(COM_ShowbabyInst& inst) = 0;
	virtual bool setNoTalkTime(F32 t) = 0;
	virtual bool addNpc(std::vector< S32 >& npcList) = 0;
	virtual bool delNpc(std::vector< S32 >& npcList) = 0;
	virtual bool setTeamLeader(S32 playerId, bool isLeader) = 0;
	virtual bool initBag(std::vector< COM_Item >& items) = 0;
	virtual bool addBagItem(COM_Item& item) = 0;
	virtual bool delBagItem(U16 slot) = 0;
	virtual bool updateBagItem(COM_Item& item) = 0;
	virtual bool depositItemOK(COM_Item& item) = 0;
	virtual bool getoutItemOK(U16 slot) = 0;
	virtual bool depositBabyOK(COM_BabyInst& baby) = 0;
	virtual bool getoutBabyOK(U16 slot) = 0;
	virtual bool sortItemStorageOK(std::vector< COM_Item >& items) = 0;
	virtual bool sortBabyStorageOK(std::vector< U32 >& babys) = 0;
	virtual bool initItemStorage(U16 gridNum, std::vector< COM_Item >& items) = 0;
	virtual bool initBabyStorage(U16 gridNum, std::vector< COM_BabyInst >& babys) = 0;
	virtual bool openStorageGrid(StorageType tp, U16 gridNum) = 0;
	virtual bool delStorageBabyOK(U16 slot) = 0;
	virtual bool initPlayerEquips(std::vector< COM_Item >& equips) = 0;
	virtual bool wearEquipmentOk(U32 target, COM_Item& equip) = 0;
	virtual bool scenePlayerWearEquipment(U32 target, U32 itemId) = 0;
	virtual bool delEquipmentOk(U32 target, U32 itemInstId) = 0;
	virtual bool scenePlayerDoffEquipment(U32 target, U32 itemId) = 0;
	virtual bool sortBagItemOk() = 0;
	virtual bool jointLobbyOk(std::vector< COM_SimpleTeamInfo >& infos) = 0;
	virtual bool exitLobbyOk() = 0;
	virtual bool syncDelLobbyTeam(U32 teamId) = 0;
	virtual bool syncUpdateLobbyTeam(COM_SimpleTeamInfo& info) = 0;
	virtual bool syncAddLobbyTeam(COM_SimpleTeamInfo& team) = 0;
	virtual bool createTeamOk(COM_TeamInfo& team) = 0;
	virtual bool changeTeamOk(COM_TeamInfo& team) = 0;
	virtual bool joinTeamOk(COM_TeamInfo& team) = 0;
	virtual bool addTeamMember(COM_SimplePlayerInst& info) = 0;
	virtual bool delTeamMember(S32 instId) = 0;
	virtual bool changeTeamLeaderOk(S32 uuid) = 0;
	virtual bool exitTeamOk(bool iskick) = 0;
	virtual bool updateTeam(COM_TeamInfo& team) = 0;
	virtual bool joinTeamRoomOK(COM_TeamInfo& team) = 0;
	virtual bool inviteJoinTeam(U32 teamId, std::string& name) = 0;
	virtual bool syncTeamDirtyProp(S32 guid, std::vector< COM_PropValue >& props) = 0;
	virtual bool leaveTeamOk(S32 playerId) = 0;
	virtual bool backTeamOK(S32 playerId) = 0;
	virtual bool teamCallMemberBack() = 0;
	virtual bool refuseBackTeamOk(S32 playerId) = 0;
	virtual bool requestJoinTeamTranspond(std::string& reqName) = 0;
	virtual bool drawLotteryBoxRep(std::vector< COM_Item >& items) = 0;
	virtual bool addEmployee(COM_EmployeeInst& employee) = 0;
	virtual bool battleEmployee(S32 empId, EmployeesBattleGroup group, bool forbattle) = 0;
	virtual bool changeEmpBattleGroupOK(EmployeesBattleGroup group) = 0;
	virtual bool evolveOK(S32 guid, QualityColor qc) = 0;
	virtual bool upStarOK(S32 guid, S32 star, COM_Skill& sk) = 0;
	virtual bool delEmployeeOK(std::vector< U32 >& instids) = 0;
	virtual bool sycnEmployeeSoul(S32 guid, U32 soulNum) = 0;
	virtual bool initQuest(std::vector< COM_QuestInst >& qlist, std::vector< S32 >& clist) = 0;
	virtual bool acceptQuestOk(COM_QuestInst& inst) = 0;
	virtual bool submitQuestOk(S32 questId) = 0;
	virtual bool giveupQuestOk(S32 questId) = 0;
	virtual bool updateQuestInst(COM_QuestInst& inst) = 0;
	virtual bool requestContactInfoOk(COM_ContactInfo& contact) = 0;
	virtual bool addFriendOK(COM_ContactInfo& inst) = 0;
	virtual bool delFriendOK(U32 instId) = 0;
	virtual bool addBlacklistOK(COM_ContactInfo& inst) = 0;
	virtual bool delBlacklistOK(U32 instId) = 0;
	virtual bool findFriendFail() = 0;
	virtual bool referrFriendOK(std::vector< COM_ContactInfo >& insts) = 0;
	virtual bool requestFriendListOK(std::vector< COM_ContactInfo >& insts) = 0;
	virtual bool lotteryOk(S32 lotteryId, std::vector< COM_DropItem >& dropItem) = 0;
	virtual bool openGatherOK(COM_Gather& gather) = 0;
	virtual bool miningOk(std::vector< COM_DropItem >& items, COM_Gather& gather, U32 gatherNum) = 0;
	virtual bool openCompound(U32 compoundId) = 0;
	virtual bool compoundItemOk(COM_Item& item) = 0;
	virtual bool openBagGridOk(S32 num) = 0;
	virtual bool requestChallengeOK(bool isOK) = 0;
	virtual bool requestMySelfJJCDataOK(COM_EndlessStair& info) = 0;
	virtual bool requestRivalOK(std::vector< COM_EndlessStair >& infos) = 0;
	virtual bool rivalTimeOK() = 0;
	virtual bool checkMsgOK(COM_SimplePlayerInst& inst) = 0;
	virtual bool requestMyAllbattleMsgOK(std::vector< COM_JJCBattleMsg >& infos) = 0;
	virtual bool myBattleMsgOK(COM_JJCBattleMsg& info) = 0;
	virtual bool requestJJCRankOK(U32 myRank, std::vector< COM_EndlessStair >& infos) = 0;
	virtual bool requestLevelRankOK(U32 myRank, std::vector< COM_ContactInfo >& infos) = 0;
	virtual bool requestBabyRankOK(U32 myRank, std::vector< COM_BabyRankData >& infos) = 0;
	virtual bool requestEmpRankOK(U32 myRank, std::vector< COM_EmployeeRankData >& infos) = 0;
	virtual bool requestPlayerFFRankOK(U32 myRank, std::vector< COM_ContactInfo >& infos) = 0;
	virtual bool queryOnlinePlayerOK(bool isOnline) = 0;
	virtual bool queryPlayerOK(COM_SimplePlayerInst& inst) = 0;
	virtual bool queryBabyOK(COM_BabyInst& inst) = 0;
	virtual bool queryEmployeeOK(COM_EmployeeInst& inst) = 0;
	virtual bool initGuide(U32 guideMask) = 0;
	virtual bool buyShopItemOk(S32 id) = 0;
	virtual bool addPlayerTitle(S32 title) = 0;
	virtual bool delPlayerTitle(S32 title) = 0;
	virtual bool requestOpenBuyBox(F32 greenTime, F32 blueTime, S32 greenFreeNum) = 0;
	virtual bool requestGreenBoxTimeOk() = 0;
	virtual bool requestBlueBoxTimeOk() = 0;
	virtual bool updateAchievementinfo(COM_Achievement& achs) = 0;
	virtual bool syncOpenSystemFlag(U64 flag) = 0;
	virtual bool requestActivityRewardOK(U32 ar) = 0;
	virtual bool syncActivity(COM_ActivityTable& table) = 0;
	virtual bool updateActivityStatus(ActivityType type, bool open) = 0;
	virtual bool updateActivityCounter(ActivityType type, S32 counter, S32 reward) = 0;
	virtual bool syncExam(COM_Exam& exam) = 0;
	virtual bool syncExamAnswer(COM_Answer& answer) = 0;
	virtual bool petActivityNoNum(std::string& name) = 0;
	virtual bool syncHundredInfo(COM_HundredBattle& hb) = 0;
	virtual bool initSignUp(std::vector< S32 >& info, S32 process, bool sign7, bool sign14, bool sign28) = 0;
	virtual bool signUp(bool flag) = 0;
	virtual bool requestSignupRewardOk7() = 0;
	virtual bool requestSignupRewardOk14() = 0;
	virtual bool requestSignupRewardOk28() = 0;
	virtual bool sycnDoubleExpTime(bool isFlag, F32 times) = 0;
	virtual bool sycnStates(std::vector< COM_State >& states) = 0;
	virtual bool requestpvprankOK(std::vector< COM_ContactInfo >& infos) = 0;
	virtual bool syncMyJJCTeamMember() = 0;
	virtual bool startMatchingOK() = 0;
	virtual bool stopMatchingOK(F32 times) = 0;
	virtual bool updatePvpJJCinfo(COM_PlayerVsPlayer& info) = 0;
	virtual bool exitPvpJJCOk() = 0;
	virtual bool syncEnemyPvpJJCPlayerInfo(COM_SimpleInformation& info) = 0;
	virtual bool syncEnemyPvpJJCTeamInfo(std::vector< COM_SimpleInformation >& infos, U32 teamID_) = 0;
	virtual bool openWarriorchooseUI() = 0;
	virtual bool warriorStartOK() = 0;
	virtual bool warriorStopOK() = 0;
	virtual bool syncWarriorEnemyTeamInfo(std::vector< COM_SimpleInformation >& infos, U32 teamID_) = 0;
	virtual bool appendMail(std::vector< COM_Mail >& mails) = 0;
	virtual bool delMail(S32 mailId) = 0;
	virtual bool updateMailOk(COM_Mail& mail) = 0;
	virtual bool boardcastNotice(std::string& content, bool isGm) = 0;
	virtual bool createGuildOK() = 0;
	virtual bool delGuildOK() = 0;
	virtual bool leaveGuildOk(std::string& who, bool isKick) = 0;
	virtual bool initGuildData(COM_Guild& guild) = 0;
	virtual bool initGuildMemberList(std::vector< COM_GuildMember >& member) = 0;
	virtual bool modifyGuildMemberList(COM_GuildMember& member, ModifyListFlag flag) = 0;
	virtual bool modifyGuildList(COM_GuildViewerData& data, ModifyListFlag flag) = 0;
	virtual bool queryGuildListResult(S16 page, S16 pageNum, std::vector< COM_GuildViewerData >& guildList) = 0;
	virtual bool inviteGuild(std::string& sendName, std::string& guildName) = 0;
	virtual bool updateGuildShopItems(std::vector< COM_GuildShopItem >& items) = 0;
	virtual bool updateGuildBuilding(GuildBuildingType type, COM_GuildBuilding& building) = 0;
	virtual bool updateGuildMyMember(COM_GuildMember& member) = 0;
	virtual bool levelupGuildSkillOk(COM_Skill& skInst) = 0;
	virtual bool presentGuildItemOk(S32 val) = 0;
	virtual bool progenitusAddExpOk(COM_GuildProgen& mInst) = 0;
	virtual bool setProgenitusPositionOk(std::vector< S32 >& positions) = 0;
	virtual bool updateGuildFundz(S32 val) = 0;
	virtual bool updateGuildMemberContribution(S32 val) = 0;
	virtual bool openGuildBattle(std::string& otherName, S32 playerNum, S32 level, bool isLeft, S32 lstime) = 0;
	virtual bool startGuildBattle(std::string& otherName, S32 otherCon, S32 selfCon) = 0;
	virtual bool closeGuildBattle(bool isWinner) = 0;
	virtual bool syncGuildBattleWinCount(S32 myWin, S32 otherWin) = 0;
	virtual bool initMySelling(std::vector< COM_SellItem >& items) = 0;
	virtual bool initMySelled(std::vector< COM_SelledItem >& items) = 0;
	virtual bool fetchSellingOk(std::vector< COM_SellItem >& items, S32 total) = 0;
	virtual bool fetchSellingOk2(std::vector< COM_SellItem >& items, S32 total) = 0;
	virtual bool sellingOk(COM_SellItem& item) = 0;
	virtual bool selledOk(COM_SelledItem& item) = 0;
	virtual bool unsellingOk(S32 sellid) = 0;
	virtual bool redemptionSpreeOk() = 0;
	virtual bool insertState(COM_State& st) = 0;
	virtual bool updattState(COM_State& st) = 0;
	virtual bool removeState(U32 stid) = 0;
	virtual bool requestFixItemOk(COM_Item& item) = 0;
	virtual bool makeDebirsItemOK() = 0;
	virtual bool updateMagicItem(S32 level, S32 exp) = 0;
	virtual bool changeMagicJobOk(JobType job) = 0;
	virtual bool magicItemTupoOk(S32 level) = 0;
	virtual bool zhuanpanOK(std::vector< U32 >& pond) = 0;
	virtual bool updateZhuanpanNotice(COM_Zhuanpan& zhuanp) = 0;
	virtual bool sycnZhuanpanData(COM_ZhuanpanData& data) = 0;
	virtual bool copynonum(std::string& name) = 0;
	virtual bool sceneFilterOk(std::vector< SceneFilterType >& sfType) = 0;
	virtual bool wishingOK() = 0;
	virtual bool shareWishOK(COM_Wish& wish) = 0;
	virtual bool leaderCloseDialogOk() = 0;
	virtual bool startOnlineTime() = 0;
	virtual bool requestOnlineTimeRewardOK(U32 index) = 0;
	virtual bool sycnVipflag(bool flag) = 0;
	virtual bool buyFundOK(bool flag) = 0;
	virtual bool requestFundRewardOK(U32 level) = 0;
	virtual bool firstRechargeOK(bool isFlag) = 0;
	virtual bool firstRechargeGiftOK(bool isFlag) = 0;
	virtual bool agencyActivity(ADType type, bool isFlag) = 0;
	virtual bool updateFestival(COM_ADLoginTotal& festival) = 0;
	virtual bool updateSelfRecharge(COM_ADChargeTotal& val) = 0;
	virtual bool updateSysRecharge(COM_ADChargeTotal& val) = 0;
	virtual bool updateSelfDiscountStore(COM_ADDiscountStore& val) = 0;
	virtual bool updateSysDiscountStore(COM_ADDiscountStore& val) = 0;
	virtual bool updateSelfOnceRecharge(COM_ADChargeEvery& val) = 0;
	virtual bool updateSysOnceRecharge(COM_ADChargeEvery& val) = 0;
	virtual bool openCardOK(COM_ADCardsContent& data) = 0;
	virtual bool resetCardOK() = 0;
	virtual bool sycnHotRole(COM_ADHotRole& data) = 0;
	virtual bool hotRoleBuyOk(U16 buyNum) = 0;
	virtual bool updateSevenday(COM_Sevenday& data) = 0;
	virtual bool updateEmployeeActivity(COM_ADEmployeeTotal& data) = 0;
	virtual bool updateMinGiftActivity(COM_ADGiftBag& data) = 0;
	virtual bool updateIntegralShop(COM_IntegralData& data) = 0;
	virtual bool updateShowBaby(U32 playerId, U32 showBabyTableId, std::string& showBabyName) = 0;
	virtual bool updateMySelfRecharge(COM_ADChargeTotal& val) = 0;
	virtual bool verificationSMSOk(std::string& phoneNumber) = 0;
	virtual bool requestLevelGiftOK(S32 level) = 0;
	virtual bool sycnConvertExp(S32 val) = 0;
	virtual bool wearFuwenOk(COM_Item& inst) = 0;
	virtual bool takeoffFuwenOk(S32 slot) = 0;
	virtual bool compFuwenOk() = 0;
	virtual bool requestEmployeeQuestOk(std::vector< COM_EmployeeQuestInst >& questList) = 0;
	virtual bool acceptEmployeeQuestOk(COM_EmployeeQuestInst& inst) = 0;
	virtual bool submitEmployeeQuestOk(S32 questId, bool isSuccess) = 0;
	virtual bool sycnCrystal(COM_CrystalData& data) = 0;
	virtual bool crystalUpLeveResult(bool isOK) = 0;
	virtual bool resetCrystalPropOK() = 0;
	virtual bool sycnCourseGift(std::vector< COM_CourseGift >& data) = 0;
	virtual bool orderOk(std::string& orderId, S32 shopId) = 0;
	virtual bool updateRandSubmitQuestCount(S32 submitCount) = 0;
	virtual bool updateTeamMember(S32 playerId, bool isMember) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool pong(ProtocolReader* r);
	bool errorno(ProtocolReader* r);
	bool teamerrorno(ProtocolReader* r);
	bool reconnection(ProtocolReader* r);
	bool sessionfailed(ProtocolReader* r);
	bool loginok(ProtocolReader* r);
	bool logoutOk(ProtocolReader* r);
	bool createPlayerOk(ProtocolReader* r);
	bool deletePlayerOk(ProtocolReader* r);
	bool enterGameOk(ProtocolReader* r);
	bool initBabies(ProtocolReader* r);
	bool initEmployees(ProtocolReader* r);
	bool initEmpBattleGroup(ProtocolReader* r);
	bool initNpc(ProtocolReader* r);
	bool initAchievement(ProtocolReader* r);
	bool initGather(ProtocolReader* r);
	bool initcompound(ProtocolReader* r);
	bool addBaby(ProtocolReader* r);
	bool refreshBaby(ProtocolReader* r);
	bool delBabyOK(ProtocolReader* r);
	bool changeBabyNameOK(ProtocolReader* r);
	bool remouldBabyOK(ProtocolReader* r);
	bool intensifyBabyOK(ProtocolReader* r);
	bool learnSkillOk(ProtocolReader* r);
	bool forgetSkillOk(ProtocolReader* r);
	bool addSkillExp(ProtocolReader* r);
	bool babyLearnSkillOK(ProtocolReader* r);
	bool skillLevelUp(ProtocolReader* r);
	bool joinScene(ProtocolReader* r);
	bool joinCopySceneOK(ProtocolReader* r);
	bool initCopyNums(ProtocolReader* r);
	bool addToScene(ProtocolReader* r);
	bool delFormScene(ProtocolReader* r);
	bool move2(ProtocolReader* r);
	bool cantMove(ProtocolReader* r);
	bool querySimplePlayerInstOk(ProtocolReader* r);
	bool transfor2(ProtocolReader* r);
	bool openScene(ProtocolReader* r);
	bool autoBattleResult(ProtocolReader* r);
	bool talked2Npc(ProtocolReader* r);
	bool talked2Player(ProtocolReader* r);
	bool useItemOk(ProtocolReader* r);
	bool syncBattleStatus(ProtocolReader* r);
	bool enterBattleOk(ProtocolReader* r);
	bool exitBattleOk(ProtocolReader* r);
	bool syncOrderOk(ProtocolReader* r);
	bool syncOrderOkEX(ProtocolReader* r);
	bool syncOneTurnAction(ProtocolReader* r);
	bool syncProperties(ProtocolReader* r);
	bool receiveChat(ProtocolReader* r);
	bool requestAudioOk(ProtocolReader* r);
	bool publishItemInstRes(ProtocolReader* r);
	bool queryItemInstRes(ProtocolReader* r);
	bool publishBabyInstRes(ProtocolReader* r);
	bool queryBabyInstRes(ProtocolReader* r);
	bool setNoTalkTime(ProtocolReader* r);
	bool addNpc(ProtocolReader* r);
	bool delNpc(ProtocolReader* r);
	bool setTeamLeader(ProtocolReader* r);
	bool initBag(ProtocolReader* r);
	bool addBagItem(ProtocolReader* r);
	bool delBagItem(ProtocolReader* r);
	bool updateBagItem(ProtocolReader* r);
	bool depositItemOK(ProtocolReader* r);
	bool getoutItemOK(ProtocolReader* r);
	bool depositBabyOK(ProtocolReader* r);
	bool getoutBabyOK(ProtocolReader* r);
	bool sortItemStorageOK(ProtocolReader* r);
	bool sortBabyStorageOK(ProtocolReader* r);
	bool initItemStorage(ProtocolReader* r);
	bool initBabyStorage(ProtocolReader* r);
	bool openStorageGrid(ProtocolReader* r);
	bool delStorageBabyOK(ProtocolReader* r);
	bool initPlayerEquips(ProtocolReader* r);
	bool wearEquipmentOk(ProtocolReader* r);
	bool scenePlayerWearEquipment(ProtocolReader* r);
	bool delEquipmentOk(ProtocolReader* r);
	bool scenePlayerDoffEquipment(ProtocolReader* r);
	bool sortBagItemOk(ProtocolReader* r);
	bool jointLobbyOk(ProtocolReader* r);
	bool exitLobbyOk(ProtocolReader* r);
	bool syncDelLobbyTeam(ProtocolReader* r);
	bool syncUpdateLobbyTeam(ProtocolReader* r);
	bool syncAddLobbyTeam(ProtocolReader* r);
	bool createTeamOk(ProtocolReader* r);
	bool changeTeamOk(ProtocolReader* r);
	bool joinTeamOk(ProtocolReader* r);
	bool addTeamMember(ProtocolReader* r);
	bool delTeamMember(ProtocolReader* r);
	bool changeTeamLeaderOk(ProtocolReader* r);
	bool exitTeamOk(ProtocolReader* r);
	bool updateTeam(ProtocolReader* r);
	bool joinTeamRoomOK(ProtocolReader* r);
	bool inviteJoinTeam(ProtocolReader* r);
	bool syncTeamDirtyProp(ProtocolReader* r);
	bool leaveTeamOk(ProtocolReader* r);
	bool backTeamOK(ProtocolReader* r);
	bool teamCallMemberBack(ProtocolReader* r);
	bool refuseBackTeamOk(ProtocolReader* r);
	bool requestJoinTeamTranspond(ProtocolReader* r);
	bool drawLotteryBoxRep(ProtocolReader* r);
	bool addEmployee(ProtocolReader* r);
	bool battleEmployee(ProtocolReader* r);
	bool changeEmpBattleGroupOK(ProtocolReader* r);
	bool evolveOK(ProtocolReader* r);
	bool upStarOK(ProtocolReader* r);
	bool delEmployeeOK(ProtocolReader* r);
	bool sycnEmployeeSoul(ProtocolReader* r);
	bool initQuest(ProtocolReader* r);
	bool acceptQuestOk(ProtocolReader* r);
	bool submitQuestOk(ProtocolReader* r);
	bool giveupQuestOk(ProtocolReader* r);
	bool updateQuestInst(ProtocolReader* r);
	bool requestContactInfoOk(ProtocolReader* r);
	bool addFriendOK(ProtocolReader* r);
	bool delFriendOK(ProtocolReader* r);
	bool addBlacklistOK(ProtocolReader* r);
	bool delBlacklistOK(ProtocolReader* r);
	bool findFriendFail(ProtocolReader* r);
	bool referrFriendOK(ProtocolReader* r);
	bool requestFriendListOK(ProtocolReader* r);
	bool lotteryOk(ProtocolReader* r);
	bool openGatherOK(ProtocolReader* r);
	bool miningOk(ProtocolReader* r);
	bool openCompound(ProtocolReader* r);
	bool compoundItemOk(ProtocolReader* r);
	bool openBagGridOk(ProtocolReader* r);
	bool requestChallengeOK(ProtocolReader* r);
	bool requestMySelfJJCDataOK(ProtocolReader* r);
	bool requestRivalOK(ProtocolReader* r);
	bool rivalTimeOK(ProtocolReader* r);
	bool checkMsgOK(ProtocolReader* r);
	bool requestMyAllbattleMsgOK(ProtocolReader* r);
	bool myBattleMsgOK(ProtocolReader* r);
	bool requestJJCRankOK(ProtocolReader* r);
	bool requestLevelRankOK(ProtocolReader* r);
	bool requestBabyRankOK(ProtocolReader* r);
	bool requestEmpRankOK(ProtocolReader* r);
	bool requestPlayerFFRankOK(ProtocolReader* r);
	bool queryOnlinePlayerOK(ProtocolReader* r);
	bool queryPlayerOK(ProtocolReader* r);
	bool queryBabyOK(ProtocolReader* r);
	bool queryEmployeeOK(ProtocolReader* r);
	bool initGuide(ProtocolReader* r);
	bool buyShopItemOk(ProtocolReader* r);
	bool addPlayerTitle(ProtocolReader* r);
	bool delPlayerTitle(ProtocolReader* r);
	bool requestOpenBuyBox(ProtocolReader* r);
	bool requestGreenBoxTimeOk(ProtocolReader* r);
	bool requestBlueBoxTimeOk(ProtocolReader* r);
	bool updateAchievementinfo(ProtocolReader* r);
	bool syncOpenSystemFlag(ProtocolReader* r);
	bool requestActivityRewardOK(ProtocolReader* r);
	bool syncActivity(ProtocolReader* r);
	bool updateActivityStatus(ProtocolReader* r);
	bool updateActivityCounter(ProtocolReader* r);
	bool syncExam(ProtocolReader* r);
	bool syncExamAnswer(ProtocolReader* r);
	bool petActivityNoNum(ProtocolReader* r);
	bool syncHundredInfo(ProtocolReader* r);
	bool initSignUp(ProtocolReader* r);
	bool signUp(ProtocolReader* r);
	bool requestSignupRewardOk7(ProtocolReader* r);
	bool requestSignupRewardOk14(ProtocolReader* r);
	bool requestSignupRewardOk28(ProtocolReader* r);
	bool sycnDoubleExpTime(ProtocolReader* r);
	bool sycnStates(ProtocolReader* r);
	bool requestpvprankOK(ProtocolReader* r);
	bool syncMyJJCTeamMember(ProtocolReader* r);
	bool startMatchingOK(ProtocolReader* r);
	bool stopMatchingOK(ProtocolReader* r);
	bool updatePvpJJCinfo(ProtocolReader* r);
	bool exitPvpJJCOk(ProtocolReader* r);
	bool syncEnemyPvpJJCPlayerInfo(ProtocolReader* r);
	bool syncEnemyPvpJJCTeamInfo(ProtocolReader* r);
	bool openWarriorchooseUI(ProtocolReader* r);
	bool warriorStartOK(ProtocolReader* r);
	bool warriorStopOK(ProtocolReader* r);
	bool syncWarriorEnemyTeamInfo(ProtocolReader* r);
	bool appendMail(ProtocolReader* r);
	bool delMail(ProtocolReader* r);
	bool updateMailOk(ProtocolReader* r);
	bool boardcastNotice(ProtocolReader* r);
	bool createGuildOK(ProtocolReader* r);
	bool delGuildOK(ProtocolReader* r);
	bool leaveGuildOk(ProtocolReader* r);
	bool initGuildData(ProtocolReader* r);
	bool initGuildMemberList(ProtocolReader* r);
	bool modifyGuildMemberList(ProtocolReader* r);
	bool modifyGuildList(ProtocolReader* r);
	bool queryGuildListResult(ProtocolReader* r);
	bool inviteGuild(ProtocolReader* r);
	bool updateGuildShopItems(ProtocolReader* r);
	bool updateGuildBuilding(ProtocolReader* r);
	bool updateGuildMyMember(ProtocolReader* r);
	bool levelupGuildSkillOk(ProtocolReader* r);
	bool presentGuildItemOk(ProtocolReader* r);
	bool progenitusAddExpOk(ProtocolReader* r);
	bool setProgenitusPositionOk(ProtocolReader* r);
	bool updateGuildFundz(ProtocolReader* r);
	bool updateGuildMemberContribution(ProtocolReader* r);
	bool openGuildBattle(ProtocolReader* r);
	bool startGuildBattle(ProtocolReader* r);
	bool closeGuildBattle(ProtocolReader* r);
	bool syncGuildBattleWinCount(ProtocolReader* r);
	bool initMySelling(ProtocolReader* r);
	bool initMySelled(ProtocolReader* r);
	bool fetchSellingOk(ProtocolReader* r);
	bool fetchSellingOk2(ProtocolReader* r);
	bool sellingOk(ProtocolReader* r);
	bool selledOk(ProtocolReader* r);
	bool unsellingOk(ProtocolReader* r);
	bool redemptionSpreeOk(ProtocolReader* r);
	bool insertState(ProtocolReader* r);
	bool updattState(ProtocolReader* r);
	bool removeState(ProtocolReader* r);
	bool requestFixItemOk(ProtocolReader* r);
	bool makeDebirsItemOK(ProtocolReader* r);
	bool updateMagicItem(ProtocolReader* r);
	bool changeMagicJobOk(ProtocolReader* r);
	bool magicItemTupoOk(ProtocolReader* r);
	bool zhuanpanOK(ProtocolReader* r);
	bool updateZhuanpanNotice(ProtocolReader* r);
	bool sycnZhuanpanData(ProtocolReader* r);
	bool copynonum(ProtocolReader* r);
	bool sceneFilterOk(ProtocolReader* r);
	bool wishingOK(ProtocolReader* r);
	bool shareWishOK(ProtocolReader* r);
	bool leaderCloseDialogOk(ProtocolReader* r);
	bool startOnlineTime(ProtocolReader* r);
	bool requestOnlineTimeRewardOK(ProtocolReader* r);
	bool sycnVipflag(ProtocolReader* r);
	bool buyFundOK(ProtocolReader* r);
	bool requestFundRewardOK(ProtocolReader* r);
	bool firstRechargeOK(ProtocolReader* r);
	bool firstRechargeGiftOK(ProtocolReader* r);
	bool agencyActivity(ProtocolReader* r);
	bool updateFestival(ProtocolReader* r);
	bool updateSelfRecharge(ProtocolReader* r);
	bool updateSysRecharge(ProtocolReader* r);
	bool updateSelfDiscountStore(ProtocolReader* r);
	bool updateSysDiscountStore(ProtocolReader* r);
	bool updateSelfOnceRecharge(ProtocolReader* r);
	bool updateSysOnceRecharge(ProtocolReader* r);
	bool openCardOK(ProtocolReader* r);
	bool resetCardOK(ProtocolReader* r);
	bool sycnHotRole(ProtocolReader* r);
	bool hotRoleBuyOk(ProtocolReader* r);
	bool updateSevenday(ProtocolReader* r);
	bool updateEmployeeActivity(ProtocolReader* r);
	bool updateMinGiftActivity(ProtocolReader* r);
	bool updateIntegralShop(ProtocolReader* r);
	bool updateShowBaby(ProtocolReader* r);
	bool updateMySelfRecharge(ProtocolReader* r);
	bool verificationSMSOk(ProtocolReader* r);
	bool requestLevelGiftOK(ProtocolReader* r);
	bool sycnConvertExp(ProtocolReader* r);
	bool wearFuwenOk(ProtocolReader* r);
	bool takeoffFuwenOk(ProtocolReader* r);
	bool compFuwenOk(ProtocolReader* r);
	bool requestEmployeeQuestOk(ProtocolReader* r);
	bool acceptEmployeeQuestOk(ProtocolReader* r);
	bool submitEmployeeQuestOk(ProtocolReader* r);
	bool sycnCrystal(ProtocolReader* r);
	bool crystalUpLeveResult(ProtocolReader* r);
	bool resetCrystalPropOK(ProtocolReader* r);
	bool sycnCourseGift(ProtocolReader* r);
	bool orderOk(ProtocolReader* r);
	bool updateRandSubmitQuestCount(ProtocolReader* r);
	bool updateTeamMember(ProtocolReader* r);
};
//=============================================================
// service stub SGE_World2Login
class SGE_World2LoginStub
{
public:
	// methods.
	void queryAccount(const COM_LoginInfo& info);
	void setAccountSeal(const std::string& accountname,bool val);
	void setPhoneNumber(const std::string& accountname,const std::string& phoneNumber);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_World2Login
class SGE_World2LoginProxy
{
public:
	// methods.
	virtual bool queryAccount(COM_LoginInfo& info) = 0;
	virtual bool setAccountSeal(std::string& accountname, bool val) = 0;
	virtual bool setPhoneNumber(std::string& accountname, std::string& phoneNumber) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool queryAccount(ProtocolReader* r);
	bool setAccountSeal(ProtocolReader* r);
	bool setPhoneNumber(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Login2World
class SGE_Login2WorldStub
{
public:
	// methods.
	void queryAccountOk(const COM_AccountInfo& info,bool isNew,bool isSeal);
	void setAccountSealOk(const std::string& accountname);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Login2World
class SGE_Login2WorldProxy
{
public:
	// methods.
	virtual bool queryAccountOk(COM_AccountInfo& info, bool isNew, bool isSeal) = 0;
	virtual bool setAccountSealOk(std::string& accountname) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool queryAccountOk(ProtocolReader* r);
	bool setAccountSealOk(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Gateway2World
class SGE_Gateway2WorldStub
{
public:
	// methods.
	void syncConnectInfo(S32 indoor,const std::string& ip);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Gateway2World
class SGE_Gateway2WorldProxy
{
public:
	// methods.
	virtual bool syncConnectInfo(S32 indoor, std::string& ip) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool syncConnectInfo(ProtocolReader* r);
};
//=============================================================
// service stub SGE_World2DB
class SGE_World2DBStub
{
public:
	// methods.
	void queryPlayerSimpleInformation(const std::string& username,S32 serverId);
	void queryPlayer(const std::string& username,S32 playerId);
	void createPlayer(const std::string& username,const SGE_DBPlayerData& inst,S32 serverId);
	void updatePlayer(const std::string& username,const SGE_DBPlayerData& inst);
	void deletePlayer(const std::string& playername);
	void queryPlayerById(const std::string& name,S32 instId,S32 where);
	void insertEndlessStair(S32 rank,const std::string& name);
	void updateEndlessStair(S32 rank,const std::string& name);
	void createBaby(const std::string& playername,const COM_BabyInst& inst,bool isToStorage);
	void deleteBaby(const std::string& playername,S32 babyInstId);
	void updateBaby(const COM_BabyInst& inst);
	void updateBabys(const std::string& playername,const std::vector< COM_BabyInst >& babys);
	void queryBabyById(const std::string& name,U32 instid);
	void createEmployee(const std::string& playername,const COM_EmployeeInst& inst);
	void deleteEmployee(const std::string& playername,const std::vector< U32 >& instIds);
	void updateEmployee(const COM_EmployeeInst& inst);
	void queryEmployeeById(const std::string& name,U32 instid);
	void insertMail(const COM_Mail& mail);
	void insertMailAll(const COM_Mail& mail);
	void insertMailByRecvs(const COM_Mail& mail,const std::vector< std::string >& recvs);
	void fatchMail(const std::string& recvName,S32 mailId);
	void delMail(const std::string& recvName,S32 mailId);
	void updateMail(const COM_Mail& mail);
	void insertGuild(const COM_Guild& guild,const COM_GuildMember& guildMember);
	void updateGuildRequestList(U32 guildId,const std::vector< COM_GuildRequestData >& data);
	void createGuildMember(const COM_GuildMember& guildMember);
	void delGuild(S32 guildId);
	void updateGuildNotice(U32 guildId,const std::string& notice);
	void updateGuild(const COM_Guild& guild);
	void updateMemberPosition(S32 roleId,GuildJob job);
	void updateMemberContribution(S32 roleId,S32 contribution);
	void updateGuildStruction(U32 guildId,S8 level,S32 struction);
	void deleteGuildMember(S32 playerId);
	void insertActivity(ADType adt,const SGE_SysActivity& date);
	void insertLoseCharge(S32 playerId,const SGE_OrderInfo& order);
	void insertEmployeeQuest(U32 playerId,const SGE_PlayerEmployeeQuest& data);
	void delEmployeeQuest(U32 playerId);
	void deleteEndlessStair(const std::string& name);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_World2DB
class SGE_World2DBProxy
{
public:
	// methods.
	virtual bool queryPlayerSimpleInformation(std::string& username, S32 serverId) = 0;
	virtual bool queryPlayer(std::string& username, S32 playerId) = 0;
	virtual bool createPlayer(std::string& username, SGE_DBPlayerData& inst, S32 serverId) = 0;
	virtual bool updatePlayer(std::string& username, SGE_DBPlayerData& inst) = 0;
	virtual bool deletePlayer(std::string& playername) = 0;
	virtual bool queryPlayerById(std::string& name, S32 instId, S32 where) = 0;
	virtual bool insertEndlessStair(S32 rank, std::string& name) = 0;
	virtual bool updateEndlessStair(S32 rank, std::string& name) = 0;
	virtual bool createBaby(std::string& playername, COM_BabyInst& inst, bool isToStorage) = 0;
	virtual bool deleteBaby(std::string& playername, S32 babyInstId) = 0;
	virtual bool updateBaby(COM_BabyInst& inst) = 0;
	virtual bool updateBabys(std::string& playername, std::vector< COM_BabyInst >& babys) = 0;
	virtual bool queryBabyById(std::string& name, U32 instid) = 0;
	virtual bool createEmployee(std::string& playername, COM_EmployeeInst& inst) = 0;
	virtual bool deleteEmployee(std::string& playername, std::vector< U32 >& instIds) = 0;
	virtual bool updateEmployee(COM_EmployeeInst& inst) = 0;
	virtual bool queryEmployeeById(std::string& name, U32 instid) = 0;
	virtual bool insertMail(COM_Mail& mail) = 0;
	virtual bool insertMailAll(COM_Mail& mail) = 0;
	virtual bool insertMailByRecvs(COM_Mail& mail, std::vector< std::string >& recvs) = 0;
	virtual bool fatchMail(std::string& recvName, S32 mailId) = 0;
	virtual bool delMail(std::string& recvName, S32 mailId) = 0;
	virtual bool updateMail(COM_Mail& mail) = 0;
	virtual bool insertGuild(COM_Guild& guild, COM_GuildMember& guildMember) = 0;
	virtual bool updateGuildRequestList(U32 guildId, std::vector< COM_GuildRequestData >& data) = 0;
	virtual bool createGuildMember(COM_GuildMember& guildMember) = 0;
	virtual bool delGuild(S32 guildId) = 0;
	virtual bool updateGuildNotice(U32 guildId, std::string& notice) = 0;
	virtual bool updateGuild(COM_Guild& guild) = 0;
	virtual bool updateMemberPosition(S32 roleId, GuildJob job) = 0;
	virtual bool updateMemberContribution(S32 roleId, S32 contribution) = 0;
	virtual bool updateGuildStruction(U32 guildId, S8 level, S32 struction) = 0;
	virtual bool deleteGuildMember(S32 playerId) = 0;
	virtual bool insertActivity(ADType adt, SGE_SysActivity& date) = 0;
	virtual bool insertLoseCharge(S32 playerId, SGE_OrderInfo& order) = 0;
	virtual bool insertEmployeeQuest(U32 playerId, SGE_PlayerEmployeeQuest& data) = 0;
	virtual bool delEmployeeQuest(U32 playerId) = 0;
	virtual bool deleteEndlessStair(std::string& name) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool queryPlayerSimpleInformation(ProtocolReader* r);
	bool queryPlayer(ProtocolReader* r);
	bool createPlayer(ProtocolReader* r);
	bool updatePlayer(ProtocolReader* r);
	bool deletePlayer(ProtocolReader* r);
	bool queryPlayerById(ProtocolReader* r);
	bool insertEndlessStair(ProtocolReader* r);
	bool updateEndlessStair(ProtocolReader* r);
	bool createBaby(ProtocolReader* r);
	bool deleteBaby(ProtocolReader* r);
	bool updateBaby(ProtocolReader* r);
	bool updateBabys(ProtocolReader* r);
	bool queryBabyById(ProtocolReader* r);
	bool createEmployee(ProtocolReader* r);
	bool deleteEmployee(ProtocolReader* r);
	bool updateEmployee(ProtocolReader* r);
	bool queryEmployeeById(ProtocolReader* r);
	bool insertMail(ProtocolReader* r);
	bool insertMailAll(ProtocolReader* r);
	bool insertMailByRecvs(ProtocolReader* r);
	bool fatchMail(ProtocolReader* r);
	bool delMail(ProtocolReader* r);
	bool updateMail(ProtocolReader* r);
	bool insertGuild(ProtocolReader* r);
	bool updateGuildRequestList(ProtocolReader* r);
	bool createGuildMember(ProtocolReader* r);
	bool delGuild(ProtocolReader* r);
	bool updateGuildNotice(ProtocolReader* r);
	bool updateGuild(ProtocolReader* r);
	bool updateMemberPosition(ProtocolReader* r);
	bool updateMemberContribution(ProtocolReader* r);
	bool updateGuildStruction(ProtocolReader* r);
	bool deleteGuildMember(ProtocolReader* r);
	bool insertActivity(ProtocolReader* r);
	bool insertLoseCharge(ProtocolReader* r);
	bool insertEmployeeQuest(ProtocolReader* r);
	bool delEmployeeQuest(ProtocolReader* r);
	bool deleteEndlessStair(ProtocolReader* r);
};
//=============================================================
// service stub SGE_DB2World
class SGE_DB2WorldStub
{
public:
	// methods.
	void syncGlobalGuid(U32 id);
	void syncContactInfo(const std::vector< SGE_ContactInfoExt >& info);
	void queryPlayerSimpleInformationOk(const std::string& username,const std::vector< COM_SimpleInformation >& insts,S32 serverId);
	void queryPlayerOk(const std::string& username,const SGE_DBPlayerData& player);
	void createPlayerOk(const std::string& username,const SGE_DBPlayerData& inst,S32 inDoorId);
	void createPlayerSameName(const std::string& username);
	void queryPlayerByIdOK(const std::string& playername,const SGE_DBPlayerData& inst,S32 where);
	void queryEndlessStairAllDateOK(const std::vector< std::string >& name);
	void queryPlayerByLevelOK(const std::vector< COM_ContactInfo >& info);
	void queryPlayerByFFOK(const std::vector< COM_ContactInfo >& info);
	void createBabyOK(const std::string& playername,const COM_BabyInst& inst,bool isToStorage);
	void deleteBabyOK(const std::string& playername,S32 babyInstId);
	void queryBabyByFFOK(const std::vector< COM_BabyRankData >& infos);
	void queryBabyByIdOK(const std::string& name,const COM_BabyInst& inst);
	void UpdateBabysOK(const std::string& playername);
	void createEmployeeOK(const std::string& playername,const COM_EmployeeInst& inst);
	void deleteEmployeeOK(const std::string& playername,const std::vector< U32 >& instIds);
	void queryEmployeeByFFOK(const std::vector< COM_EmployeeRankData >& infos);
	void queryEmployeeByIdOK(const std::string& name,const COM_EmployeeInst& inst);
	void appendMail(const std::string& playerName,const std::vector< COM_Mail >& mails);
	void insertGuildOK(const COM_Guild& guild,const COM_GuildMember& guildMember);
	void updateMemberJobOk(S32 roleId,GuildJob job);
	void syncGuild(const std::vector< COM_Guild >& guilds);
	void syncGuildMember(const std::vector< COM_GuildMember >& guildMember);
	void fatchActivity(const SGE_SysActivity& date);
	void syncEmployeeQuest(const std::vector< SGE_PlayerEmployeeQuest >& info);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_DB2World
class SGE_DB2WorldProxy
{
public:
	// methods.
	virtual bool syncGlobalGuid(U32 id) = 0;
	virtual bool syncContactInfo(std::vector< SGE_ContactInfoExt >& info) = 0;
	virtual bool queryPlayerSimpleInformationOk(std::string& username, std::vector< COM_SimpleInformation >& insts, S32 serverId) = 0;
	virtual bool queryPlayerOk(std::string& username, SGE_DBPlayerData& player) = 0;
	virtual bool createPlayerOk(std::string& username, SGE_DBPlayerData& inst, S32 inDoorId) = 0;
	virtual bool createPlayerSameName(std::string& username) = 0;
	virtual bool queryPlayerByIdOK(std::string& playername, SGE_DBPlayerData& inst, S32 where) = 0;
	virtual bool queryEndlessStairAllDateOK(std::vector< std::string >& name) = 0;
	virtual bool queryPlayerByLevelOK(std::vector< COM_ContactInfo >& info) = 0;
	virtual bool queryPlayerByFFOK(std::vector< COM_ContactInfo >& info) = 0;
	virtual bool createBabyOK(std::string& playername, COM_BabyInst& inst, bool isToStorage) = 0;
	virtual bool deleteBabyOK(std::string& playername, S32 babyInstId) = 0;
	virtual bool queryBabyByFFOK(std::vector< COM_BabyRankData >& infos) = 0;
	virtual bool queryBabyByIdOK(std::string& name, COM_BabyInst& inst) = 0;
	virtual bool UpdateBabysOK(std::string& playername) = 0;
	virtual bool createEmployeeOK(std::string& playername, COM_EmployeeInst& inst) = 0;
	virtual bool deleteEmployeeOK(std::string& playername, std::vector< U32 >& instIds) = 0;
	virtual bool queryEmployeeByFFOK(std::vector< COM_EmployeeRankData >& infos) = 0;
	virtual bool queryEmployeeByIdOK(std::string& name, COM_EmployeeInst& inst) = 0;
	virtual bool appendMail(std::string& playerName, std::vector< COM_Mail >& mails) = 0;
	virtual bool insertGuildOK(COM_Guild& guild, COM_GuildMember& guildMember) = 0;
	virtual bool updateMemberJobOk(S32 roleId, GuildJob job) = 0;
	virtual bool syncGuild(std::vector< COM_Guild >& guilds) = 0;
	virtual bool syncGuildMember(std::vector< COM_GuildMember >& guildMember) = 0;
	virtual bool fatchActivity(SGE_SysActivity& date) = 0;
	virtual bool syncEmployeeQuest(std::vector< SGE_PlayerEmployeeQuest >& info) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool syncGlobalGuid(ProtocolReader* r);
	bool syncContactInfo(ProtocolReader* r);
	bool queryPlayerSimpleInformationOk(ProtocolReader* r);
	bool queryPlayerOk(ProtocolReader* r);
	bool createPlayerOk(ProtocolReader* r);
	bool createPlayerSameName(ProtocolReader* r);
	bool queryPlayerByIdOK(ProtocolReader* r);
	bool queryEndlessStairAllDateOK(ProtocolReader* r);
	bool queryPlayerByLevelOK(ProtocolReader* r);
	bool queryPlayerByFFOK(ProtocolReader* r);
	bool createBabyOK(ProtocolReader* r);
	bool deleteBabyOK(ProtocolReader* r);
	bool queryBabyByFFOK(ProtocolReader* r);
	bool queryBabyByIdOK(ProtocolReader* r);
	bool UpdateBabysOK(ProtocolReader* r);
	bool createEmployeeOK(ProtocolReader* r);
	bool deleteEmployeeOK(ProtocolReader* r);
	bool queryEmployeeByFFOK(ProtocolReader* r);
	bool queryEmployeeByIdOK(ProtocolReader* r);
	bool appendMail(ProtocolReader* r);
	bool insertGuildOK(ProtocolReader* r);
	bool updateMemberJobOk(ProtocolReader* r);
	bool syncGuild(ProtocolReader* r);
	bool syncGuildMember(ProtocolReader* r);
	bool fatchActivity(ProtocolReader* r);
	bool syncEmployeeQuest(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Scene2World
class SGE_Scene2WorldStub
{
public:
	// methods.
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Scene2World
class SGE_Scene2WorldProxy
{
public:
	// methods.
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
};
//=============================================================
// service stub SGE_World2Scene
class SGE_World2SceneStub
{
public:
	// methods.
	void initDynamicNpcs(NpcType type,S32 count);
	void refreshDynamicNpcs(NpcType type,S32 count);
	void finiDynamicNpcs(NpcType type);
	void addDynamicNpcs(S32 sceneId,const std::vector< S32 >& npcs);
	void delDynamicNpc(S32 npcId);
	void delDynamicNpc2(S32 sceneId,S32 npcId);
	void openSceneCopy(S32 instId);
	void closeSceneCopy(S32 instId);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_World2Scene
class SGE_World2SceneProxy
{
public:
	// methods.
	virtual bool initDynamicNpcs(NpcType type, S32 count) = 0;
	virtual bool refreshDynamicNpcs(NpcType type, S32 count) = 0;
	virtual bool finiDynamicNpcs(NpcType type) = 0;
	virtual bool addDynamicNpcs(S32 sceneId, std::vector< S32 >& npcs) = 0;
	virtual bool delDynamicNpc(S32 npcId) = 0;
	virtual bool delDynamicNpc2(S32 sceneId, S32 npcId) = 0;
	virtual bool openSceneCopy(S32 instId) = 0;
	virtual bool closeSceneCopy(S32 instId) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool initDynamicNpcs(ProtocolReader* r);
	bool refreshDynamicNpcs(ProtocolReader* r);
	bool finiDynamicNpcs(ProtocolReader* r);
	bool addDynamicNpcs(ProtocolReader* r);
	bool delDynamicNpc(ProtocolReader* r);
	bool delDynamicNpc2(ProtocolReader* r);
	bool openSceneCopy(ProtocolReader* r);
	bool closeSceneCopy(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Player_Scene2World
class SGE_Player_Scene2WorldStub
{
public:
	// methods.
	void joinScene(const COM_SceneInfo& info);
	void move2(const COM_FPosition& pos);
	void cantMove();
	void transfor2(const COM_FPosition& pos);
	void autoBattleResult(bool isOk);
	void zoneJoinBattle(S32 zoneId);
	void playerAddNpc(const std::vector< S32 >& npcs);
	void playerDelNpc(const std::vector< S32 >& npcs);
	void talkedNpc(S32 npcid);
	void findDynamicNpcOK(S32 npcid,bool hasnpc);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Player_Scene2World
class SGE_Player_Scene2WorldProxy
{
public:
	// methods.
	virtual bool joinScene(COM_SceneInfo& info) = 0;
	virtual bool move2(COM_FPosition& pos) = 0;
	virtual bool cantMove() = 0;
	virtual bool transfor2(COM_FPosition& pos) = 0;
	virtual bool autoBattleResult(bool isOk) = 0;
	virtual bool zoneJoinBattle(S32 zoneId) = 0;
	virtual bool playerAddNpc(std::vector< S32 >& npcs) = 0;
	virtual bool playerDelNpc(std::vector< S32 >& npcs) = 0;
	virtual bool talkedNpc(S32 npcid) = 0;
	virtual bool findDynamicNpcOK(S32 npcid, bool hasnpc) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool joinScene(ProtocolReader* r);
	bool move2(ProtocolReader* r);
	bool cantMove(ProtocolReader* r);
	bool transfor2(ProtocolReader* r);
	bool autoBattleResult(ProtocolReader* r);
	bool zoneJoinBattle(ProtocolReader* r);
	bool playerAddNpc(ProtocolReader* r);
	bool playerDelNpc(ProtocolReader* r);
	bool talkedNpc(ProtocolReader* r);
	bool findDynamicNpcOK(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Player_World2Scene
class SGE_Player_World2SceneStub
{
public:
	// methods.
	void initScenePlayer(const SGE_ScenePlayerInfo& info);
	void scenePlayerUpLevel(S32 level);
	void scenePlayerAddCurrentQuest(S32 questId);
	void scenePlayerDelCurrentQuest(S32 questId);
	void scenePlayerAddAcceptableQuest(S32 questId);
	void scenePlayerDelAcceptableQuest(S32 questId);
	void openScene(S32 sceneId);
	void joinBattle();
	void finishBattle();
	void transforScene(S32 sceneId);
	void transforSceneByEntry(S32 sceneId,S32 entryId);
	void backHomeScene();
	void sceneLoaded();
	void move(const COM_FPosition& pos);
	void moveToNpc(S32 npcid);
	void moveToNpc2(NpcType type);
	void moveToZone(S32 sceneId,S32 zoneId);
	void autoBattle();
	void stopMove();
	void addFollow(S32 scenePlayerId);
	void delFollow(S32 scenePlayerId);
	void delFollows();
	void addFollows(const std::vector< S32 >& scenePlayers);
	void setEntryFlag(S32 scenePlayerId,bool isFlag);
	void addNpc(S32 npcid);
	void delNpc(S32 npcid);
	void findDynamicNpc(S32 npcId);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Player_World2Scene
class SGE_Player_World2SceneProxy
{
public:
	// methods.
	virtual bool initScenePlayer(SGE_ScenePlayerInfo& info) = 0;
	virtual bool scenePlayerUpLevel(S32 level) = 0;
	virtual bool scenePlayerAddCurrentQuest(S32 questId) = 0;
	virtual bool scenePlayerDelCurrentQuest(S32 questId) = 0;
	virtual bool scenePlayerAddAcceptableQuest(S32 questId) = 0;
	virtual bool scenePlayerDelAcceptableQuest(S32 questId) = 0;
	virtual bool openScene(S32 sceneId) = 0;
	virtual bool joinBattle() = 0;
	virtual bool finishBattle() = 0;
	virtual bool transforScene(S32 sceneId) = 0;
	virtual bool transforSceneByEntry(S32 sceneId, S32 entryId) = 0;
	virtual bool backHomeScene() = 0;
	virtual bool sceneLoaded() = 0;
	virtual bool move(COM_FPosition& pos) = 0;
	virtual bool moveToNpc(S32 npcid) = 0;
	virtual bool moveToNpc2(NpcType type) = 0;
	virtual bool moveToZone(S32 sceneId, S32 zoneId) = 0;
	virtual bool autoBattle() = 0;
	virtual bool stopMove() = 0;
	virtual bool addFollow(S32 scenePlayerId) = 0;
	virtual bool delFollow(S32 scenePlayerId) = 0;
	virtual bool delFollows() = 0;
	virtual bool addFollows(std::vector< S32 >& scenePlayers) = 0;
	virtual bool setEntryFlag(S32 scenePlayerId, bool isFlag) = 0;
	virtual bool addNpc(S32 npcid) = 0;
	virtual bool delNpc(S32 npcid) = 0;
	virtual bool findDynamicNpc(S32 npcId) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool initScenePlayer(ProtocolReader* r);
	bool scenePlayerUpLevel(ProtocolReader* r);
	bool scenePlayerAddCurrentQuest(ProtocolReader* r);
	bool scenePlayerDelCurrentQuest(ProtocolReader* r);
	bool scenePlayerAddAcceptableQuest(ProtocolReader* r);
	bool scenePlayerDelAcceptableQuest(ProtocolReader* r);
	bool openScene(ProtocolReader* r);
	bool joinBattle(ProtocolReader* r);
	bool finishBattle(ProtocolReader* r);
	bool transforScene(ProtocolReader* r);
	bool transforSceneByEntry(ProtocolReader* r);
	bool backHomeScene(ProtocolReader* r);
	bool sceneLoaded(ProtocolReader* r);
	bool move(ProtocolReader* r);
	bool moveToNpc(ProtocolReader* r);
	bool moveToNpc2(ProtocolReader* r);
	bool moveToZone(ProtocolReader* r);
	bool autoBattle(ProtocolReader* r);
	bool stopMove(ProtocolReader* r);
	bool addFollow(ProtocolReader* r);
	bool delFollow(ProtocolReader* r);
	bool delFollows(ProtocolReader* r);
	bool addFollows(ProtocolReader* r);
	bool setEntryFlag(ProtocolReader* r);
	bool addNpc(ProtocolReader* r);
	bool delNpc(ProtocolReader* r);
	bool findDynamicNpc(ProtocolReader* r);
};
//=============================================================
// service stub SGE_World2GMT
class SGE_World2GMTStub
{
public:
	// methods.
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_World2GMT
class SGE_World2GMTProxy
{
public:
	// methods.
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
};
//=============================================================
// service stub SGE_GMT2World
class SGE_GMT2WorldStub
{
public:
	// methods.
	void addExp(U32 playerId,U32 exp);
	void addMoney(U32 playerId,S32 money);
	void addDiamond(U32 playerId,S32 diamond);
	void openGM(U32 playerId);
	void closeGM(U32 playerId);
	void noTalkPlayer(U32 playerId,U32 time);
	void sealPlayer(U32 playerId);
	void kickPlayer(U32 playerId);
	void openTalkPlayer(U32 playerId);
	void unsealPlayer(U32 playerId);
	void sendMailAllOnline(const COM_Mail& mail,S32 lowLevel,S32 highLevel,S64 lowRegTime,S64 highRegTime);
	void gmtNotice(NoticeSendType bType,const std::string& note,U64 thetime,S64 itvtime);
	void setChargeTotal(const COM_ADChargeTotal& data);
	void setChargeEvery(const COM_ADChargeEvery& data);
	void setDiscountStore(const COM_ADDiscountStore& data);
	void setLoginTotal(const COM_ADLoginTotal& data);
	void setHotRole(const COM_ADHotRole& data);
	void setEmployeeActivity(const COM_ADEmployeeTotal& data);
	void setMinGiftBagActivity(const COM_ADGiftBag& data);
	void setZhuanpanActivity(const COM_ZhuanpanData& data);
	void setIntegralshop(const COM_IntegralData& data);
	void makeOrder(U32 playerId,const SGE_GmtOrder& order);
	void doScript(const std::string& script);
	void playerDoScript(U32 playerId,const std::string& script);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_GMT2World
class SGE_GMT2WorldProxy
{
public:
	// methods.
	virtual bool addExp(U32 playerId, U32 exp) = 0;
	virtual bool addMoney(U32 playerId, S32 money) = 0;
	virtual bool addDiamond(U32 playerId, S32 diamond) = 0;
	virtual bool openGM(U32 playerId) = 0;
	virtual bool closeGM(U32 playerId) = 0;
	virtual bool noTalkPlayer(U32 playerId, U32 time) = 0;
	virtual bool sealPlayer(U32 playerId) = 0;
	virtual bool kickPlayer(U32 playerId) = 0;
	virtual bool openTalkPlayer(U32 playerId) = 0;
	virtual bool unsealPlayer(U32 playerId) = 0;
	virtual bool sendMailAllOnline(COM_Mail& mail, S32 lowLevel, S32 highLevel, S64 lowRegTime, S64 highRegTime) = 0;
	virtual bool gmtNotice(NoticeSendType bType, std::string& note, U64 thetime, S64 itvtime) = 0;
	virtual bool setChargeTotal(COM_ADChargeTotal& data) = 0;
	virtual bool setChargeEvery(COM_ADChargeEvery& data) = 0;
	virtual bool setDiscountStore(COM_ADDiscountStore& data) = 0;
	virtual bool setLoginTotal(COM_ADLoginTotal& data) = 0;
	virtual bool setHotRole(COM_ADHotRole& data) = 0;
	virtual bool setEmployeeActivity(COM_ADEmployeeTotal& data) = 0;
	virtual bool setMinGiftBagActivity(COM_ADGiftBag& data) = 0;
	virtual bool setZhuanpanActivity(COM_ZhuanpanData& data) = 0;
	virtual bool setIntegralshop(COM_IntegralData& data) = 0;
	virtual bool makeOrder(U32 playerId, SGE_GmtOrder& order) = 0;
	virtual bool doScript(std::string& script) = 0;
	virtual bool playerDoScript(U32 playerId, std::string& script) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool addExp(ProtocolReader* r);
	bool addMoney(ProtocolReader* r);
	bool addDiamond(ProtocolReader* r);
	bool openGM(ProtocolReader* r);
	bool closeGM(ProtocolReader* r);
	bool noTalkPlayer(ProtocolReader* r);
	bool sealPlayer(ProtocolReader* r);
	bool kickPlayer(ProtocolReader* r);
	bool openTalkPlayer(ProtocolReader* r);
	bool unsealPlayer(ProtocolReader* r);
	bool sendMailAllOnline(ProtocolReader* r);
	bool gmtNotice(ProtocolReader* r);
	bool setChargeTotal(ProtocolReader* r);
	bool setChargeEvery(ProtocolReader* r);
	bool setDiscountStore(ProtocolReader* r);
	bool setLoginTotal(ProtocolReader* r);
	bool setHotRole(ProtocolReader* r);
	bool setEmployeeActivity(ProtocolReader* r);
	bool setMinGiftBagActivity(ProtocolReader* r);
	bool setZhuanpanActivity(ProtocolReader* r);
	bool setIntegralshop(ProtocolReader* r);
	bool makeOrder(ProtocolReader* r);
	bool doScript(ProtocolReader* r);
	bool playerDoScript(ProtocolReader* r);
};
//=============================================================
// service stub SGE_World2Mall
class SGE_World2MallStub
{
public:
	// methods.
	void fetchSell(S32 playerid,const COM_SearchContext& context);
	void fetchMySell(S32 playerid);
	void fetchSelledItem(S32 playerId);
	void sell(const COM_SellItem& item);
	void unSell(S32 playerid,S32 sellid);
	void buy(const SGE_BuyContent& content);
	void insertSelledItem(const COM_SelledItem& item);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_World2Mall
class SGE_World2MallProxy
{
public:
	// methods.
	virtual bool fetchSell(S32 playerid, COM_SearchContext& context) = 0;
	virtual bool fetchMySell(S32 playerid) = 0;
	virtual bool fetchSelledItem(S32 playerId) = 0;
	virtual bool sell(COM_SellItem& item) = 0;
	virtual bool unSell(S32 playerid, S32 sellid) = 0;
	virtual bool buy(SGE_BuyContent& content) = 0;
	virtual bool insertSelledItem(COM_SelledItem& item) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool fetchSell(ProtocolReader* r);
	bool fetchMySell(ProtocolReader* r);
	bool fetchSelledItem(ProtocolReader* r);
	bool sell(ProtocolReader* r);
	bool unSell(ProtocolReader* r);
	bool buy(ProtocolReader* r);
	bool insertSelledItem(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Mall2World
class SGE_Mall2WorldStub
{
public:
	// methods.
	void fetchSellOk(S32 playerid,const std::vector< COM_SellItem >& items,S32 totalSize);
	void fetchMySellOk(S32 playerid,const std::vector< COM_SellItem >& items);
	void fetchSelledItemOk(S32 playerId,const std::vector< COM_SelledItem >& items);
	void sellOk(S32 playerid,const COM_SellItem& item);
	void unSellOk(S32 playerid,S32 sellid);
	void buyOk(S32 playerid,const COM_SellItem& item);
	void buyFail(S32 playerid,ErrorNo errorno);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Mall2World
class SGE_Mall2WorldProxy
{
public:
	// methods.
	virtual bool fetchSellOk(S32 playerid, std::vector< COM_SellItem >& items, S32 totalSize) = 0;
	virtual bool fetchMySellOk(S32 playerid, std::vector< COM_SellItem >& items) = 0;
	virtual bool fetchSelledItemOk(S32 playerId, std::vector< COM_SelledItem >& items) = 0;
	virtual bool sellOk(S32 playerid, COM_SellItem& item) = 0;
	virtual bool unSellOk(S32 playerid, S32 sellid) = 0;
	virtual bool buyOk(S32 playerid, COM_SellItem& item) = 0;
	virtual bool buyFail(S32 playerid, ErrorNo errorno) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool fetchSellOk(ProtocolReader* r);
	bool fetchMySellOk(ProtocolReader* r);
	bool fetchSelledItemOk(ProtocolReader* r);
	bool sellOk(ProtocolReader* r);
	bool unSellOk(ProtocolReader* r);
	bool buyOk(ProtocolReader* r);
	bool buyFail(ProtocolReader* r);
};
//=============================================================
// service stub Backlog
class BacklogStub
{
public:
	// methods.
	void log(const std::string& key,const std::string& msg,const std::string& stack,const std::string& version);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy Backlog
class BacklogProxy
{
public:
	// methods.
	virtual bool log(std::string& key, std::string& msg, std::string& stack, std::string& version) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool log(ProtocolReader* r);
};
//=============================================================
// service stub SGE_Log
class SGE_LogStub
{
public:
	// methods.
	void account(const SGE_Account& data);
	void login(const SGE_Login& data);
	void order(const SGE_Order& data);
	void role(const SGE_LogRole& data);
	void playersay(U32 senderId,const std::string& senderName,const COM_Chat& chat);
	void playerTrack(const SGE_LogProduceTrack& data);
	void playerUIBehavior(const SGE_LogUIBehavior& core);
protected:
	// events to be processed.
	virtual ProtocolWriter* methodBegin() = 0;
	virtual void methodEnd() = 0;
};
// service proxy SGE_Log
class SGE_LogProxy
{
public:
	// methods.
	virtual bool account(SGE_Account& data) = 0;
	virtual bool login(SGE_Login& data) = 0;
	virtual bool order(SGE_Order& data) = 0;
	virtual bool role(SGE_LogRole& data) = 0;
	virtual bool playersay(U32 senderId, std::string& senderName, COM_Chat& chat) = 0;
	virtual bool playerTrack(SGE_LogProduceTrack& data) = 0;
	virtual bool playerUIBehavior(SGE_LogUIBehavior& core) = 0;
	
	// dispatch.
	bool dispatch(ProtocolReader* reader);
protected:
	// deserialization.
	bool account(ProtocolReader* r);
	bool login(ProtocolReader* r);
	bool order(ProtocolReader* r);
	bool role(ProtocolReader* r);
	bool playersay(ProtocolReader* r);
	bool playerTrack(ProtocolReader* r);
	bool playerUIBehavior(ProtocolReader* r);
};
#endif
