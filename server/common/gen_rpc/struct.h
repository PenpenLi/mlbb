/* This file is generated by arpcc, do not change manually! */
#ifndef __struct_h__
#define __struct_h__
#include "ProtocolWriter.h"
#include "ProtocolReader.h"
#include "EnumInfo.h"
#include "com.h"
//=============================================================
// struct SGE_OrderInfo
struct SGE_OrderInfo
{
	// member list.
	S32 productId_;
	S32 productCount_;
	F32 amount_;
	std::string orderId_;
	std::string payTime_;
	// field ids.
	enum
	{
		FID_productId_ = 0,
		FID_productCount_ = 1,
		FID_amount_ = 2,
		FID_orderId_ = 3,
		FID_payTime_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	SGE_OrderInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADLoginTotalContent
struct COM_ADLoginTotalContent
{
	// member list.
	U32 totalDays_;
	std::vector< U32 > itemIds_;
	std::vector< U32 > itemStacks_;
	U8 status_;
	// field ids.
	enum
	{
		FID_totalDays_ = 0,
		FID_itemIds_ = 1,
		FID_itemStacks_ = 2,
		FID_status_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADLoginTotalContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADLoginTotal
struct COM_ADLoginTotal
{
	// member list.
	S32 loginDays_;
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADLoginTotalContent > contents_;
	// field ids.
	enum
	{
		FID_loginDays_ = 0,
		FID_sinceStamp_ = 1,
		FID_endStamp_ = 2,
		FID_contents_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADLoginTotal();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADChargeTotalContent
struct COM_ADChargeTotalContent
{
	// member list.
	U32 currencyCount_;
	std::vector< U32 > itemIds_;
	std::vector< U32 > itemStacks_;
	U8 status_;
	// field ids.
	enum
	{
		FID_currencyCount_ = 0,
		FID_itemIds_ = 1,
		FID_itemStacks_ = 2,
		FID_status_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADChargeTotalContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADChargeTotal
struct COM_ADChargeTotal
{
	// member list.
	S32 recharge_;
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADChargeTotalContent > contents_;
	// field ids.
	enum
	{
		FID_recharge_ = 0,
		FID_sinceStamp_ = 1,
		FID_endStamp_ = 2,
		FID_contents_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADChargeTotal();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADDiscountStoreContent
struct COM_ADDiscountStoreContent
{
	// member list.
	U32 price_;
	U32 itemId_;
	F32 discount_;
	U32 buyLimit_;
	// field ids.
	enum
	{
		FID_price_ = 0,
		FID_itemId_ = 1,
		FID_discount_ = 2,
		FID_buyLimit_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADDiscountStoreContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADDiscountStore
struct COM_ADDiscountStore
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADDiscountStoreContent > contents_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_contents_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ADDiscountStore();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADChargeEveryContent
struct COM_ADChargeEveryContent
{
	// member list.
	U32 currencyCount_;
	std::vector< U32 > itemIds_;
	std::vector< U32 > itemStacks_;
	U8 status_;
	U8 count_;
	// field ids.
	enum
	{
		FID_currencyCount_ = 0,
		FID_itemIds_ = 1,
		FID_itemStacks_ = 2,
		FID_status_ = 3,
		FID_count_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_ADChargeEveryContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADChargeEvery
struct COM_ADChargeEvery
{
	// member list.
	S32 currentCount_;
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADChargeEveryContent > contents_;
	// field ids.
	enum
	{
		FID_currentCount_ = 0,
		FID_sinceStamp_ = 1,
		FID_endStamp_ = 2,
		FID_contents_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADChargeEvery();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADCardsContent
struct COM_ADCardsContent
{
	// member list.
	U32 count_;
	U32 rewardId_;
	// field ids.
	enum
	{
		FID_count_ = 0,
		FID_rewardId_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_ADCardsContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADCards
struct COM_ADCards
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADCardsContent > contents_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_contents_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ADCards();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADHotRoleContent
struct COM_ADHotRoleContent
{
	// member list.
	EntityType type_;
	U32 buyNum_;
	U32 roleId_;
	U32 price_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_buyNum_ = 1,
		FID_roleId_ = 2,
		FID_price_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADHotRoleContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADHotRole
struct COM_ADHotRole
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADHotRoleContent > contents_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_contents_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ADHotRole();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADEmployeeTotalContent
struct COM_ADEmployeeTotalContent
{
	// member list.
	U32 outputCount_;
	std::vector< U32 > itemIds_;
	std::vector< U32 > itemStacks_;
	U8 status_;
	// field ids.
	enum
	{
		FID_outputCount_ = 0,
		FID_itemIds_ = 1,
		FID_itemStacks_ = 2,
		FID_status_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADEmployeeTotalContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADEmployeeTotal
struct COM_ADEmployeeTotal
{
	// member list.
	S32 outputNum_;
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ADEmployeeTotalContent > contents_;
	// field ids.
	enum
	{
		FID_outputNum_ = 0,
		FID_sinceStamp_ = 1,
		FID_endStamp_ = 2,
		FID_contents_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ADEmployeeTotal();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GiftItem
struct COM_GiftItem
{
	// member list.
	U32 itemId_;
	U32 itemNum_;
	// field ids.
	enum
	{
		FID_itemId_ = 0,
		FID_itemNum_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_GiftItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ADGiftBag
struct COM_ADGiftBag
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	bool isflag_;
	U8 price_;
	U8 oldprice_;
	std::vector< COM_GiftItem > itemdata_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_isflag_ = 2,
		FID_price_ = 3,
		FID_oldprice_ = 4,
		FID_itemdata_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_ADGiftBag();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Sevenday
struct COM_Sevenday
{
	// member list.
	U32 quest_;
	AchievementType stype_;
	U32 qvalue_;
	bool isfinish_;
	bool isreward_;
	// field ids.
	enum
	{
		FID_quest_ = 0,
		FID_stype_ = 1,
		FID_qvalue_ = 2,
		FID_isfinish_ = 3,
		FID_isreward_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_Sevenday();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ZhuanpanContent
struct COM_ZhuanpanContent
{
	// member list.
	U32 id_;
	U32 item_;
	U32 itemNum_;
	U32 rate_;
	U32 maxdrop_;
	// field ids.
	enum
	{
		FID_id_ = 0,
		FID_item_ = 1,
		FID_itemNum_ = 2,
		FID_rate_ = 3,
		FID_maxdrop_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_ZhuanpanContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Zhuanpan
struct COM_Zhuanpan
{
	// member list.
	std::string playerName_;
	U32 zhuanpanId_;
	// field ids.
	enum
	{
		FID_playerName_ = 0,
		FID_zhuanpanId_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_Zhuanpan();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ZhuanpanData
struct COM_ZhuanpanData
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	std::vector< COM_ZhuanpanContent > contents_;
	std::vector< COM_Zhuanpan > rarity_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_contents_ = 2,
		FID_rarity_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ZhuanpanData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_IntegralContent
struct COM_IntegralContent
{
	// member list.
	U32 id_;
	U32 itemid_;
	S32 times_;
	S32 cost_;
	// field ids.
	enum
	{
		FID_id_ = 0,
		FID_itemid_ = 1,
		FID_times_ = 2,
		FID_cost_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_IntegralContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_IntegralData
struct COM_IntegralData
{
	// member list.
	U64 sinceStamp_;
	U64 endStamp_;
	U32 integral_;
	bool isflag_;
	std::vector< COM_IntegralContent > contents_;
	// field ids.
	enum
	{
		FID_sinceStamp_ = 0,
		FID_endStamp_ = 1,
		FID_integral_ = 2,
		FID_isflag_ = 3,
		FID_contents_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_IntegralData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_SysActivity
struct SGE_SysActivity
{
	// member list.
	COM_ADLoginTotal loginData_;
	COM_ADChargeTotal chData_;
	COM_ADDiscountStore stData_;
	COM_ADChargeEvery ceData_;
	COM_ADCards acData_;
	COM_ADHotRole hrData_;
	COM_ADEmployeeTotal etdata_;
	COM_ADGiftBag gbdata_;
	COM_ZhuanpanData zpdata_;
	COM_IntegralData icdata_;
	// field ids.
	enum
	{
		FID_loginData_ = 0,
		FID_chData_ = 1,
		FID_stData_ = 2,
		FID_ceData_ = 3,
		FID_acData_ = 4,
		FID_hrData_ = 5,
		FID_etdata_ = 6,
		FID_gbdata_ = 7,
		FID_zpdata_ = 8,
		FID_icdata_ = 9,
		FIDMAX = 10,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_LoginInfo
struct COM_LoginInfo
{
	// member list.
	std::string username_;
	std::string password_;
	U32 version_;
	std::string sessionkey_;
	std::string mac_;
	std::string idfa_;
	std::string devicetype_;
	// field ids.
	enum
	{
		FID_username_ = 0,
		FID_password_ = 1,
		FID_version_ = 2,
		FID_sessionkey_ = 3,
		FID_mac_ = 4,
		FID_idfa_ = 5,
		FID_devicetype_ = 6,
		FIDMAX = 7,
	};
	// constructor.
	COM_LoginInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_FPosition
struct COM_FPosition
{
	// member list.
	F32 x_;
	F32 z_;
	bool isLast_;
	// field ids.
	enum
	{
		FID_x_ = 0,
		FID_z_ = 1,
		FID_isLast_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_FPosition();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ScenePlayerInformation
struct COM_ScenePlayerInformation
{
	// member list.
	bool isLeader_;
	bool isTeamMember_;
	bool isInBattle_;
	S16 vip_;
	S32 instId_;
	S32 assetId_;
	S32 weaponItemId_;
	S32 fashionId_;
	S32 hpMax_;
	S32 hpCrt_;
	S32 mpMax_;
	S32 mpCrt_;
	S32 level_;
	S32 battlePower_;
	S32 jl_;
	S32 magicLv_;
	U64 openSubSystemFlag_;
	S32 title_;
	std::string instName_;
	std::string guildeName_;
	JobType jt_;
	EntityType type_;
	COM_FPosition originPos_;
	S32 showBabyTableId_;
	std::string showBabyName_;
	// field ids.
	enum
	{
		FID_isLeader_ = 0,
		FID_isTeamMember_ = 1,
		FID_isInBattle_ = 2,
		FID_vip_ = 3,
		FID_instId_ = 4,
		FID_assetId_ = 5,
		FID_weaponItemId_ = 6,
		FID_fashionId_ = 7,
		FID_hpMax_ = 8,
		FID_hpCrt_ = 9,
		FID_mpMax_ = 10,
		FID_mpCrt_ = 11,
		FID_level_ = 12,
		FID_battlePower_ = 13,
		FID_jl_ = 14,
		FID_magicLv_ = 15,
		FID_openSubSystemFlag_ = 16,
		FID_title_ = 17,
		FID_instName_ = 18,
		FID_guildeName_ = 19,
		FID_jt_ = 20,
		FID_type_ = 21,
		FID_originPos_ = 22,
		FID_showBabyTableId_ = 23,
		FID_showBabyName_ = 24,
		FIDMAX = 25,
	};
	// constructor.
	COM_ScenePlayerInformation();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BattleEntityInformation
struct COM_BattleEntityInformation
{
	// member list.
	EntityType type_;
	std::string instName_;
	S32 instId_;
	S32 tableId_;
	S32 assetId_;
	JobType jt_;
	BattlePosition battlePosition_;
	S32 weaponItemId_;
	S32 fashionId_;
	S32 hpMax_;
	S32 hpCrt_;
	S32 mpMax_;
	S32 mpCrt_;
	S32 level_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_instName_ = 1,
		FID_instId_ = 2,
		FID_tableId_ = 3,
		FID_assetId_ = 4,
		FID_jt_ = 5,
		FID_battlePosition_ = 6,
		FID_weaponItemId_ = 7,
		FID_fashionId_ = 8,
		FID_hpMax_ = 9,
		FID_hpCrt_ = 10,
		FID_mpMax_ = 11,
		FID_mpCrt_ = 12,
		FID_level_ = 13,
		FIDMAX = 14,
	};
	// constructor.
	COM_BattleEntityInformation();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SimpleInformation
struct COM_SimpleInformation
{
	// member list.
	S32 instId_;
	S32 level_;
	S32 asset_id_;
	std::string instName_;
	S32 weaponItemId_;
	S32 fashionId_;
	U32 section_;
	JobType jt_;
	S32 jl_;
	// field ids.
	enum
	{
		FID_instId_ = 0,
		FID_level_ = 1,
		FID_asset_id_ = 2,
		FID_instName_ = 3,
		FID_weaponItemId_ = 4,
		FID_fashionId_ = 5,
		FID_section_ = 6,
		FID_jt_ = 7,
		FID_jl_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	COM_SimpleInformation();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_AccountInfo
struct COM_AccountInfo
{
	// member list.
	U32 guid_;
	std::string username_;
	std::string password_;
	U64 createtime_;
	std::string phoneNumber_;
	// field ids.
	enum
	{
		FID_guid_ = 0,
		FID_username_ = 1,
		FID_password_ = 2,
		FID_createtime_ = 3,
		FID_phoneNumber_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_AccountInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_PropValue
struct COM_PropValue
{
	// member list.
	PropertyType type_;
	F32 value_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_value_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_PropValue();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Item
struct COM_Item
{
	// member list.
	U32 itemId_;
	U32 instId_;
	S16 stack_;
	bool isBind_;
	bool isLock_;
	S8 strLevel_;
	S16 slot_;
	S32 skillID_;
	S32 durability_;
	S32 durabilityMax_;
	S32 usedTimeout_;
	S32 lastSellTime_;
	std::vector< COM_PropValue > propArr;
	// field ids.
	enum
	{
		FID_itemId_ = 0,
		FID_instId_ = 1,
		FID_stack_ = 2,
		FID_isBind_ = 3,
		FID_isLock_ = 4,
		FID_strLevel_ = 5,
		FID_slot_ = 6,
		FID_skillID_ = 7,
		FID_durability_ = 8,
		FID_durabilityMax_ = 9,
		FID_usedTimeout_ = 10,
		FID_lastSellTime_ = 11,
		FID_propArr = 12,
		FIDMAX = 13,
	};
	// constructor.
	COM_Item();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_DropItem
struct COM_DropItem
{
	// member list.
	U32 itemId_;
	U32 itemNum_;
	// field ids.
	enum
	{
		FID_itemId_ = 0,
		FID_itemNum_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_DropItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_CrystalProp
struct COM_CrystalProp
{
	// member list.
	U32 level_;
	PropertyType type_;
	U32 val_;
	// field ids.
	enum
	{
		FID_level_ = 0,
		FID_type_ = 1,
		FID_val_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_CrystalProp();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_CrystalData
struct COM_CrystalData
{
	// member list.
	U32 level_;
	std::vector< COM_CrystalProp > props_;
	// field ids.
	enum
	{
		FID_level_ = 0,
		FID_props_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_CrystalData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_QuestTarget
struct COM_QuestTarget
{
	// member list.
	U32 targetId_;
	S32 targetNum_;
	// field ids.
	enum
	{
		FID_targetId_ = 0,
		FID_targetNum_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_QuestTarget();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Skill
struct COM_Skill
{
	// member list.
	U32 skillID_;
	U32 skillExp_;
	U32 skillLevel_;
	// field ids.
	enum
	{
		FID_skillID_ = 0,
		FID_skillExp_ = 1,
		FID_skillLevel_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_Skill();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_QuestInst
struct COM_QuestInst
{
	// member list.
	S32 questId_;
	std::vector< COM_QuestTarget > targets_;
	// field ids.
	enum
	{
		FID_questId_ = 0,
		FID_targets_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_QuestInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_State
struct COM_State
{
	// member list.
	U32 stateId_;
	S8 turn_;
	S8 tick_;
	S8 type_;
	S32 value0_;
	S32 value1_;
	// field ids.
	enum
	{
		FID_stateId_ = 0,
		FID_turn_ = 1,
		FID_tick_ = 2,
		FID_type_ = 3,
		FID_value0_ = 4,
		FID_value1_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_State();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Entity
struct COM_Entity
{
	// member list.
	EntityType type_;
	std::string instName_;
	U32 instId_;
	BattlePosition battlePosition_;
	std::vector< F32 > properties_;
	std::vector< COM_Skill > skill_;
	std::vector< COM_Item > equips_;
	std::vector< COM_State > states_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_instName_ = 1,
		FID_instId_ = 2,
		FID_battlePosition_ = 3,
		FID_properties_ = 4,
		FID_skill_ = 5,
		FID_equips_ = 6,
		FID_states_ = 7,
		FIDMAX = 8,
	};
	// constructor.
	COM_Entity();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BabyInst
struct COM_BabyInst : public COM_Entity
{
	// member list.
	std::string ownerName_;
	bool isShow_;
	bool isBattle_;
	bool isBind_;
	bool isLock_;
	S32 tableId_;
	S32 slot_;
	U32 intensifyLevel_;
	U32 intensifynum_;
	S32 lastSellTime_;
	std::vector< S32 > gear_;
	std::vector< F32 > addprop_;
	// field ids.
	enum
	{
		FID_ownerName_ = 8,
		FID_isShow_ = 9,
		FID_isBattle_ = 10,
		FID_isBind_ = 11,
		FID_isLock_ = 12,
		FID_tableId_ = 13,
		FID_slot_ = 14,
		FID_intensifyLevel_ = 15,
		FID_intensifynum_ = 16,
		FID_lastSellTime_ = 17,
		FID_gear_ = 18,
		FID_addprop_ = 19,
		FIDMAX = 20,
	};
	// constructor.
	COM_BabyInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_EmployeeInst
struct COM_EmployeeInst : public COM_Entity
{
	// member list.
	std::string ownerName_;
	bool isBattle_;
	U32 weaponId_;
	QualityColor quality_;
	U32 star_;
	U32 soul_;
	// field ids.
	enum
	{
		FID_ownerName_ = 8,
		FID_isBattle_ = 9,
		FID_weaponId_ = 10,
		FID_quality_ = 11,
		FID_star_ = 12,
		FID_soul_ = 13,
		FIDMAX = 14,
	};
	// constructor.
	COM_EmployeeInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ContactInfo
struct COM_ContactInfo
{
	// member list.
	U32 instId_;
	std::string name_;
	U32 level_;
	F32 exp_;
	JobType job_;
	U32 assetId_;
	U32 jobLevel_;
	VipLevel vip_;
	U32 ff_;
	U32 rank_;
	S32 section_;
	U32 value_;
	bool isLine_;
	// field ids.
	enum
	{
		FID_instId_ = 0,
		FID_name_ = 1,
		FID_level_ = 2,
		FID_exp_ = 3,
		FID_job_ = 4,
		FID_assetId_ = 5,
		FID_jobLevel_ = 6,
		FID_vip_ = 7,
		FID_ff_ = 8,
		FID_rank_ = 9,
		FID_section_ = 10,
		FID_value_ = 11,
		FID_isLine_ = 12,
		FIDMAX = 13,
	};
	// constructor.
	COM_ContactInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_ContactInfoExt
struct SGE_ContactInfoExt : public COM_ContactInfo
{
	// member list.
	U64 rolefirst_;
	U64 rolelast_;
	U64 logoutTime_;
	U32 gold_;
	U32 diamond_;
	U32 magicgold_;
	S32 guildContribute_;
	std::string accName_;
	std::string userid_;
	std::string pfid_;
	std::string pfname_;
	U32 serverid_;
	// field ids.
	enum
	{
		FID_rolefirst_ = 13,
		FID_rolelast_ = 14,
		FID_logoutTime_ = 15,
		FID_gold_ = 16,
		FID_diamond_ = 17,
		FID_magicgold_ = 18,
		FID_guildContribute_ = 19,
		FID_accName_ = 20,
		FID_userid_ = 21,
		FID_pfid_ = 22,
		FID_pfname_ = 23,
		FID_serverid_ = 24,
		FIDMAX = 25,
	};
	// constructor.
	SGE_ContactInfoExt();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Achievement
struct COM_Achievement
{
	// member list.
	U32 achId_;
	AchievementType achType_;
	U32 achValue_;
	bool isAch_;
	bool isAward_;
	// field ids.
	enum
	{
		FID_achId_ = 0,
		FID_achType_ = 1,
		FID_achValue_ = 2,
		FID_isAch_ = 3,
		FID_isAward_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_Achievement();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_HundredBattle
struct COM_HundredBattle
{
	// member list.
	U32 playerId_;
	U32 tier_;
	U32 curTier_;
	U32 surplus_;
	U32 resetNum_;
	// field ids.
	enum
	{
		FID_playerId_ = 0,
		FID_tier_ = 1,
		FID_curTier_ = 2,
		FID_surplus_ = 3,
		FID_resetNum_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_HundredBattle();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_PlayerVsPlayer
struct COM_PlayerVsPlayer
{
	// member list.
	S32 playerInst_;
	S32 section_;
	S32 value_;
	S32 winNum_;
	S32 battleNum_;
	F32 winValue_;
	S32 contWin_;
	bool isCont_;
	// field ids.
	enum
	{
		FID_playerInst_ = 0,
		FID_section_ = 1,
		FID_value_ = 2,
		FID_winNum_ = 3,
		FID_battleNum_ = 4,
		FID_winValue_ = 5,
		FID_contWin_ = 6,
		FID_isCont_ = 7,
		FIDMAX = 8,
	};
	// constructor.
	COM_PlayerVsPlayer();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Activity
struct COM_Activity
{
	// member list.
	S32 actId_;
	S32 counter_;
	// field ids.
	enum
	{
		FID_actId_ = 0,
		FID_counter_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_Activity();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ActivityTable
struct COM_ActivityTable
{
	// member list.
	std::vector< COM_Activity > activities_;
	std::vector< U32 > flag_;
	S32 reward_;
	// field ids.
	enum
	{
		FID_activities_ = 0,
		FID_flag_ = 1,
		FID_reward_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ActivityTable();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_CourseGift
struct COM_CourseGift
{
	// member list.
	U32 id_;
	F32 timeout_;
	// field ids.
	enum
	{
		FID_id_ = 0,
		FID_timeout_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_CourseGift();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SimplePlayerInst
struct COM_SimplePlayerInst : public COM_Entity
{
	// member list.
	bool isLeavingTeam_;
	bool isBattle_;
	bool autoBattle_;
	bool isTeamLeader_;
	S32 sceneId_;
	U64 openSubSystemFlag_;
	S64 createTime_;
	std::string guildName_;
	COM_FPosition scenePos_;
	COM_PlayerVsPlayer pvpInfo_;
	std::vector< COM_BabyInst > babies1_;
	std::vector< COM_EmployeeInst > battleEmps_;
	// field ids.
	enum
	{
		FID_isLeavingTeam_ = 8,
		FID_isBattle_ = 9,
		FID_autoBattle_ = 10,
		FID_isTeamLeader_ = 11,
		FID_sceneId_ = 12,
		FID_openSubSystemFlag_ = 13,
		FID_createTime_ = 14,
		FID_guildName_ = 15,
		FID_scenePos_ = 16,
		FID_pvpInfo_ = 17,
		FID_babies1_ = 18,
		FID_battleEmps_ = 19,
		FIDMAX = 20,
	};
	// constructor.
	COM_SimplePlayerInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_PlayerInst
struct COM_PlayerInst : public COM_Entity
{
	// member list.
	bool isLeavingTeam_;
	bool isBattle_;
	bool autoBattle_;
	bool isTeamLeader_;
	S32 sceneId_;
	U64 openSubSystemFlag_;
	S64 createTime_;
	std::string guildName_;
	COM_FPosition scenePos_;
	COM_PlayerVsPlayer pvpInfo_;
	bool onlineTimeFlag_;
	F32 onlineTime_;
	std::vector< U32 > onlineTimeReward_;
	bool isFund_;
	std::vector< U32 > fundtags_;
	bool openDoubleTimeFlag_;
	bool isFirstLogin_;
	bool firstRechargeDiamond_;
	bool isFirstRechargeGift_;
	F32 offlineExp_;
	F32 rivalTime_;
	S8 rivalNum_;
	S8 promoteAward_;
	U64 guideIdx_;
	F32 noTalkTime_;
	U32 wishShareNum_;
	U32 warriortrophyNum_;
	U32 employeelasttime_;
	U32 employeeonecount_;
	U32 employeetencount_;
	F32 greenBoxTimes_;
	F32 blueBoxTimes_;
	U32 greenBoxFreeNum_;
	COM_HundredBattle hbInfo_;
	std::vector< S32 > openScenes_;
	std::vector< U32 > copyNum_;
	S32 magicItemLevel_;
	S32 magicItemeExp_;
	JobType magicItemeJob_;
	S32 magicTupoLevel_;
	std::vector< S32 > cachedNpcs_;
	std::vector< std::string > gft_;
	std::vector< U32 > babycache_;
	std::vector< S32 > titles_;
	S32 guildContribution_;
	U32 exitGuildTime_;
	std::vector< COM_Skill > guildSkills_;
	std::vector< ADType > gmActivities_;
	COM_ADLoginTotal festival_;
	COM_ADChargeTotal selfRecharge_;
	COM_ADChargeTotal sysRecharge_;
	COM_ADDiscountStore selfDiscountStore_;
	COM_ADDiscountStore sysDiscountStore_;
	COM_ADChargeEvery selfOnceRecharge_;
	COM_ADChargeEvery sysOnceRecharge_;
	COM_ADEmployeeTotal empact_;
	COM_ADCards selfCards_;
	COM_ADChargeTotal myselfRecharge_;
	COM_ADHotRole hotdata_;
	COM_ADGiftBag gbdata_;
	bool sevenflag_;
	bool signFlag_;
	std::vector< COM_Sevenday > sevendata_;
	bool viprewardflag_;
	std::string phoneNumber_;
	std::vector< U32 > levelgift_;
	COM_ActivityTable activity_;
	std::vector< COM_Item > fuwen_;
	COM_CrystalData crystalData_;
	COM_IntegralData integralData_;
	std::vector< COM_CourseGift > coursegift_;
	// field ids.
	enum
	{
		FID_isLeavingTeam_ = 8,
		FID_isBattle_ = 9,
		FID_autoBattle_ = 10,
		FID_isTeamLeader_ = 11,
		FID_sceneId_ = 12,
		FID_openSubSystemFlag_ = 13,
		FID_createTime_ = 14,
		FID_guildName_ = 15,
		FID_scenePos_ = 16,
		FID_pvpInfo_ = 17,
		FID_onlineTimeFlag_ = 18,
		FID_onlineTime_ = 19,
		FID_onlineTimeReward_ = 20,
		FID_isFund_ = 21,
		FID_fundtags_ = 22,
		FID_openDoubleTimeFlag_ = 23,
		FID_isFirstLogin_ = 24,
		FID_firstRechargeDiamond_ = 25,
		FID_isFirstRechargeGift_ = 26,
		FID_offlineExp_ = 27,
		FID_rivalTime_ = 28,
		FID_rivalNum_ = 29,
		FID_promoteAward_ = 30,
		FID_guideIdx_ = 31,
		FID_noTalkTime_ = 32,
		FID_wishShareNum_ = 33,
		FID_warriortrophyNum_ = 34,
		FID_employeelasttime_ = 35,
		FID_employeeonecount_ = 36,
		FID_employeetencount_ = 37,
		FID_greenBoxTimes_ = 38,
		FID_blueBoxTimes_ = 39,
		FID_greenBoxFreeNum_ = 40,
		FID_hbInfo_ = 41,
		FID_openScenes_ = 42,
		FID_copyNum_ = 43,
		FID_magicItemLevel_ = 44,
		FID_magicItemeExp_ = 45,
		FID_magicItemeJob_ = 46,
		FID_magicTupoLevel_ = 47,
		FID_cachedNpcs_ = 48,
		FID_gft_ = 49,
		FID_babycache_ = 50,
		FID_titles_ = 51,
		FID_guildContribution_ = 52,
		FID_exitGuildTime_ = 53,
		FID_guildSkills_ = 54,
		FID_gmActivities_ = 55,
		FID_festival_ = 56,
		FID_selfRecharge_ = 57,
		FID_sysRecharge_ = 58,
		FID_selfDiscountStore_ = 59,
		FID_sysDiscountStore_ = 60,
		FID_selfOnceRecharge_ = 61,
		FID_sysOnceRecharge_ = 62,
		FID_empact_ = 63,
		FID_selfCards_ = 64,
		FID_myselfRecharge_ = 65,
		FID_hotdata_ = 66,
		FID_gbdata_ = 67,
		FID_sevenflag_ = 68,
		FID_signFlag_ = 69,
		FID_sevendata_ = 70,
		FID_viprewardflag_ = 71,
		FID_phoneNumber_ = 72,
		FID_levelgift_ = 73,
		FID_activity_ = 74,
		FID_fuwen_ = 75,
		FID_crystalData_ = 76,
		FID_integralData_ = 77,
		FID_coursegift_ = 78,
		FIDMAX = 79,
	};
	// constructor.
	COM_PlayerInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_MonsterInst
struct COM_MonsterInst : public COM_Entity
{
	// member list.
	std::vector< S32 > gear_;
	// field ids.
	enum
	{
		FID_gear_ = 8,
		FIDMAX = 9,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReportState
struct COM_ReportState : public COM_State
{
	// member list.
	bool add_;
	S32 ownerId_;
	S8 addQueue_;
	// field ids.
	enum
	{
		FID_add_ = 6,
		FID_ownerId_ = 7,
		FID_addQueue_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	COM_ReportState();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReportTargetBase
struct COM_ReportTargetBase
{
	// member list.
	BattlePosition position_;
	COM_PropValue prop_;
	bool bao_;
	bool fly_;
	// field ids.
	enum
	{
		FID_position_ = 0,
		FID_prop_ = 1,
		FID_bao_ = 2,
		FID_fly_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ReportTargetBase();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReportTarget
struct COM_ReportTarget : public COM_ReportTargetBase
{
	// member list.
	std::vector< COM_ReportTargetBase > prop2_;
	// field ids.
	enum
	{
		FID_prop2_ = 4,
		FIDMAX = 5,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Order
struct COM_Order
{
	// member list.
	OrderStatus status_;
	S32 casterId_;
	S32 target_;
	S32 skill_;
	S32 itemId_;
	S32 weaponInstId_;
	S32 babyId_;
	S8 isSec_;
	S8 uinteGroup_;
	S32 uniteNum_;
	bool isNo_;
	// field ids.
	enum
	{
		FID_status_ = 0,
		FID_casterId_ = 1,
		FID_target_ = 2,
		FID_skill_ = 3,
		FID_itemId_ = 4,
		FID_weaponInstId_ = 5,
		FID_babyId_ = 6,
		FID_isSec_ = 7,
		FID_uinteGroup_ = 8,
		FID_uniteNum_ = 9,
		FID_isNo_ = 10,
		FIDMAX = 11,
	};
	// constructor.
	COM_Order();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReportActionCounter
struct COM_ReportActionCounter
{
	// member list.
	S32 casterId_;
	U8 targetPosition_;
	COM_ReportTarget props_;
	std::vector< COM_ReportState > states_;
	// field ids.
	enum
	{
		FID_casterId_ = 0,
		FID_targetPosition_ = 1,
		FID_props_ = 2,
		FID_states_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_ReportActionCounter();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReportAction
struct COM_ReportAction : public COM_Order
{
	// member list.
	bool zhuachongOk_;
	U8 skillLevel_;
	U8 huweiPosition_;
	BattlePosition bp0_;
	BattlePosition bp1_;
	COM_BattleEntityInformation baby_;
	std::vector< S32 > eraseEntities_;
	std::vector< COM_ReportTarget > targets_;
	std::vector< COM_ReportState > stateIds_;
	std::vector< COM_ReportActionCounter > counters_;
	std::vector< COM_BattleEntityInformation > dynamicEntities_;
	// field ids.
	enum
	{
		FID_zhuachongOk_ = 11,
		FID_skillLevel_ = 12,
		FID_huweiPosition_ = 13,
		FID_bp0_ = 14,
		FID_bp1_ = 15,
		FID_baby_ = 16,
		FID_eraseEntities_ = 17,
		FID_targets_ = 18,
		FID_stateIds_ = 19,
		FID_counters_ = 20,
		FID_dynamicEntities_ = 21,
		FIDMAX = 22,
	};
	// constructor.
	COM_ReportAction();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BattleReport
struct COM_BattleReport
{
	// member list.
	std::vector< COM_ReportState > stateIds_;
	std::vector< COM_ReportAction > actionResults_;
	std::vector< COM_ReportTarget > targets_;
	std::vector< COM_BattleEntityInformation > waveEntities_;
	// field ids.
	enum
	{
		FID_stateIds_ = 0,
		FID_actionResults_ = 1,
		FID_targets_ = 2,
		FID_waveEntities_ = 3,
		FIDMAX = 4,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_InitBattle
struct COM_InitBattle
{
	// member list.
	U32 battleId_;
	BattleType bt_;
	U32 roundCount_;
	OperateType opType_;
	SneakAttackType sneakAttack_;
	std::vector< COM_BattleEntityInformation > actors_;
	// field ids.
	enum
	{
		FID_battleId_ = 0,
		FID_bt_ = 1,
		FID_roundCount_ = 2,
		FID_opType_ = 3,
		FID_sneakAttack_ = 4,
		FID_actors_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_InitBattle();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_CreateTeamInfo
struct COM_CreateTeamInfo
{
	// member list.
	TeamType type_;
	U8 maxMemberSize_;
	std::string name_;
	std::string pwd_;
	U16 minLevel_;
	U16 maxLevel_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_maxMemberSize_ = 1,
		FID_name_ = 2,
		FID_pwd_ = 3,
		FID_minLevel_ = 4,
		FID_maxLevel_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_CreateTeamInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SimpleTeamInfo
struct COM_SimpleTeamInfo : public COM_CreateTeamInfo
{
	// member list.
	U32 teamId_;
	U8 curMemberSize_;
	std::string leaderName_;
	JobType job_;
	U32 joblevel_;
	bool needPassword_;
	bool isRunning_;
	bool isWelcome_;
	// field ids.
	enum
	{
		FID_teamId_ = 6,
		FID_curMemberSize_ = 7,
		FID_leaderName_ = 8,
		FID_job_ = 9,
		FID_joblevel_ = 10,
		FID_needPassword_ = 11,
		FID_isRunning_ = 12,
		FID_isWelcome_ = 13,
		FIDMAX = 14,
	};
	// constructor.
	COM_SimpleTeamInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_TeamInfo
struct COM_TeamInfo : public COM_SimpleTeamInfo
{
	// member list.
	std::vector< COM_SimplePlayerInst > members_;
	// field ids.
	enum
	{
		FID_members_ = 14,
		FIDMAX = 15,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_JJCBattleMsg
struct COM_JJCBattleMsg
{
	// member list.
	std::string defier_;
	std::string bydefier_;
	U32 rank_;
	bool isWin_;
	S64 curTime_;
	// field ids.
	enum
	{
		FID_defier_ = 0,
		FID_bydefier_ = 1,
		FID_rank_ = 2,
		FID_isWin_ = 3,
		FID_curTime_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_JJCBattleMsg();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BattleEmp
struct COM_BattleEmp
{
	// member list.
	EmployeesBattleGroup empBattleGroup_;
	std::vector< U32 > employeeGroup1_;
	std::vector< U32 > employeeGroup2_;
	// field ids.
	enum
	{
		FID_empBattleGroup_ = 0,
		FID_employeeGroup1_ = 1,
		FID_employeeGroup2_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_BattleEmp();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Gather
struct COM_Gather
{
	// member list.
	U32 gatherId_;
	GatherStateType flag_;
	U32 num_;
	// field ids.
	enum
	{
		FID_gatherId_ = 0,
		FID_flag_ = 1,
		FID_num_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_Gather();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_DBPlayerData
struct SGE_DBPlayerData : public COM_PlayerInst
{
	// member list.
	S32 versionNumber_;
	bool freeze_;
	bool seal_;
	U32 signs_;
	S32 sellIdMax_;
	S32 push_;
	S32 acceptRandQuestCounter_;
	S32 submitRandQuestCounter_;
	std::string pfid_;
	S32 itemStoreSize_;
	S32 babyStoreSize_;
	std::vector< SGE_OrderInfo > orders_;
	U64 loginTime_;
	U64 logoutTime_;
	U32 genItemMaxGuid_;
	U32 gaterMaxNum_;
	bool firstRollEmployeeCon_;
	bool firstRollEmployeeDia_;
	std::vector< COM_EmployeeInst > employees_;
	std::vector< COM_Item > itemStorage_;
	std::vector< COM_BabyInst > babyStorage_;
	std::vector< COM_BabyInst > babies_;
	std::vector< COM_Item > bagItems_;
	std::vector< COM_QuestInst > quests_;
	std::vector< S32 > completeQuests_;
	std::vector< COM_Item > mineReward_;
	std::vector< COM_JJCBattleMsg > jjcBattleMsg_;
	std::vector< COM_ContactInfo > friend_;
	std::vector< COM_ContactInfo > blacklist_;
	std::vector< S32 > achValues_;
	std::vector< COM_Achievement > achievement_;
	EmployeesBattleGroup empBattleGroup_;
	std::vector< U32 > employeeGroup1_;
	std::vector< U32 > employeeGroup2_;
	std::vector< COM_Gather > gatherData_;
	std::vector< U32 > compoundList_;
	// field ids.
	enum
	{
		FID_versionNumber_ = 79,
		FID_freeze_ = 80,
		FID_seal_ = 81,
		FID_signs_ = 82,
		FID_sellIdMax_ = 83,
		FID_push_ = 84,
		FID_acceptRandQuestCounter_ = 85,
		FID_submitRandQuestCounter_ = 86,
		FID_pfid_ = 87,
		FID_itemStoreSize_ = 88,
		FID_babyStoreSize_ = 89,
		FID_orders_ = 90,
		FID_loginTime_ = 91,
		FID_logoutTime_ = 92,
		FID_genItemMaxGuid_ = 93,
		FID_gaterMaxNum_ = 94,
		FID_firstRollEmployeeCon_ = 95,
		FID_firstRollEmployeeDia_ = 96,
		FID_employees_ = 97,
		FID_itemStorage_ = 98,
		FID_babyStorage_ = 99,
		FID_babies_ = 100,
		FID_bagItems_ = 101,
		FID_quests_ = 102,
		FID_completeQuests_ = 103,
		FID_mineReward_ = 104,
		FID_jjcBattleMsg_ = 105,
		FID_friend_ = 106,
		FID_blacklist_ = 107,
		FID_achValues_ = 108,
		FID_achievement_ = 109,
		FID_empBattleGroup_ = 110,
		FID_employeeGroup1_ = 111,
		FID_employeeGroup2_ = 112,
		FID_gatherData_ = 113,
		FID_compoundList_ = 114,
		FIDMAX = 115,
	};
	// constructor.
	SGE_DBPlayerData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BattleOverClearing
struct COM_BattleOverClearing
{
	// member list.
	bool isFly_;
	S32 playExp_;
	U32 playLevel_;
	U32 playFree_;
	S32 pvpJJCGrade_;
	S32 money_;
	U32 babyExp_;
	U32 babyLevel_;
	std::vector< COM_DropItem > items_;
	std::vector< COM_Skill > skills_;
	// field ids.
	enum
	{
		FID_isFly_ = 0,
		FID_playExp_ = 1,
		FID_playLevel_ = 2,
		FID_playFree_ = 3,
		FID_pvpJJCGrade_ = 4,
		FID_money_ = 5,
		FID_babyExp_ = 6,
		FID_babyLevel_ = 7,
		FID_items_ = 8,
		FID_skills_ = 9,
		FIDMAX = 10,
	};
	// constructor.
	COM_BattleOverClearing();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Addprop
struct COM_Addprop
{
	// member list.
	PropertyType type_;
	U32 uVal_;
	// field ids.
	enum
	{
		FID_type_ = 0,
		FID_uVal_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_Addprop();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ExpendItem
struct COM_ExpendItem
{
	// member list.
	U32 itemInstId_;
	U32 num_;
	// field ids.
	enum
	{
		FID_itemInstId_ = 0,
		FID_num_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_ExpendItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Chat
struct COM_Chat
{
	// member list.
	ChatKind ck_;
	bool isAudio_;
	std::string content_;
	S32 audioTime_;
	std::vector< U8 > audio_;
	bool isMe;
	S32 teamId_;
	TeamType teamType_;
	S16 teamMinLevel_;
	S16 teamMaxLevel_;
	std::string teamName_;
	// field ids.
	enum
	{
		FID_ck_ = 0,
		FID_isAudio_ = 1,
		FID_content_ = 2,
		FID_audioTime_ = 3,
		FID_audio_ = 4,
		FID_isMe = 5,
		FID_teamId_ = 6,
		FID_teamType_ = 7,
		FID_teamMinLevel_ = 8,
		FID_teamMaxLevel_ = 9,
		FID_teamName_ = 10,
		FIDMAX = 11,
	};
	// constructor.
	COM_Chat();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ChatInfo
struct COM_ChatInfo : public COM_Chat
{
	// member list.
	S32 audioId_;
	U16 assetId_;
	std::string playerName_;
	std::string guildName_;
	U32 instId_;
	// field ids.
	enum
	{
		FID_audioId_ = 11,
		FID_assetId_ = 12,
		FID_playerName_ = 13,
		FID_guildName_ = 14,
		FID_instId_ = 15,
		FIDMAX = 16,
	};
	// constructor.
	COM_ChatInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_EndlessStair
struct COM_EndlessStair
{
	// member list.
	U32 rank_;
	std::string name_;
	JobType job_;
	U32 joblevel_;
	S32 assetId_;
	U32 level_;
	F32 rivalTime_;
	S32 rivalNum_;
	// field ids.
	enum
	{
		FID_rank_ = 0,
		FID_name_ = 1,
		FID_job_ = 2,
		FID_joblevel_ = 3,
		FID_assetId_ = 4,
		FID_level_ = 5,
		FID_rivalTime_ = 6,
		FID_rivalNum_ = 7,
		FIDMAX = 8,
	};
	// constructor.
	COM_EndlessStair();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_BabyRankData
struct COM_BabyRankData
{
	// member list.
	U32 instId_;
	S32 rank_;
	std::string name_;
	std::string ownerName_;
	S32 ff_;
	// field ids.
	enum
	{
		FID_instId_ = 0,
		FID_rank_ = 1,
		FID_name_ = 2,
		FID_ownerName_ = 3,
		FID_ff_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_BabyRankData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_EmployeeRankData
struct COM_EmployeeRankData
{
	// member list.
	U32 instId_;
	S32 rank_;
	std::string name_;
	std::string ownerName_;
	S32 ff_;
	// field ids.
	enum
	{
		FID_instId_ = 0,
		FID_rank_ = 1,
		FID_name_ = 2,
		FID_ownerName_ = 3,
		FID_ff_ = 4,
		FIDMAX = 5,
	};
	// constructor.
	COM_EmployeeRankData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_MailItem
struct COM_MailItem
{
	// member list.
	S32 itemId_;
	S32 itemStack_;
	// field ids.
	enum
	{
		FID_itemId_ = 0,
		FID_itemStack_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_MailItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Mail
struct COM_Mail
{
	// member list.
	S32 mailId_;
	MailType mailType_;
	S64 timestamp_;
	std::string sendPlayerName_;
	std::string recvPlayerName_;
	std::string title_;
	std::string content_;
	S32 money_;
	S32 diamond_;
	std::vector< COM_MailItem > items_;
	bool isRead_;
	// field ids.
	enum
	{
		FID_mailId_ = 0,
		FID_mailType_ = 1,
		FID_timestamp_ = 2,
		FID_sendPlayerName_ = 3,
		FID_recvPlayerName_ = 4,
		FID_title_ = 5,
		FID_content_ = 6,
		FID_money_ = 7,
		FID_diamond_ = 8,
		FID_items_ = 9,
		FID_isRead_ = 10,
		FIDMAX = 11,
	};
	// constructor.
	COM_Mail();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildBuilding
struct COM_GuildBuilding
{
	// member list.
	S32 level_;
	S32 struction_;
	// field ids.
	enum
	{
		FID_level_ = 0,
		FID_struction_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_GuildBuilding();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildRequestData
struct COM_GuildRequestData
{
	// member list.
	S64 roleId_;
	S8 level_;
	std::string roleName_;
	S32 time_;
	S8 prof_;
	S8 profLevel_;
	// field ids.
	enum
	{
		FID_roleId_ = 0,
		FID_level_ = 1,
		FID_roleName_ = 2,
		FID_time_ = 3,
		FID_prof_ = 4,
		FID_profLevel_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_GuildRequestData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildProgen
struct COM_GuildProgen
{
	// member list.
	S32 mId_;
	S32 lev_;
	S32 exp_;
	// field ids.
	enum
	{
		FID_mId_ = 0,
		FID_lev_ = 1,
		FID_exp_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_GuildProgen();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Guild
struct COM_Guild
{
	// member list.
	S8 guildLevel_;
	S32 createTime_;
	U32 guildId_;
	U32 guildContribution_;
	U32 fundz_;
	S32 presentNum_;
	S64 master_;
	std::string masterName_;
	std::string guildName_;
	std::string notice_;
	std::vector< COM_GuildRequestData > requestList_;
	S32 noFundzDays_;
	std::vector< COM_GuildBuilding > buildings_;
	std::vector< COM_GuildProgen > progenitus_;
	std::vector< S32 > progenitusPositions_;
	// field ids.
	enum
	{
		FID_guildLevel_ = 0,
		FID_createTime_ = 1,
		FID_guildId_ = 2,
		FID_guildContribution_ = 3,
		FID_fundz_ = 4,
		FID_presentNum_ = 5,
		FID_master_ = 6,
		FID_masterName_ = 7,
		FID_guildName_ = 8,
		FID_notice_ = 9,
		FID_requestList_ = 10,
		FID_noFundzDays_ = 11,
		FID_buildings_ = 12,
		FID_progenitus_ = 13,
		FID_progenitusPositions_ = 14,
		FIDMAX = 15,
	};
	// constructor.
	COM_Guild();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildShopItem
struct COM_GuildShopItem
{
	// member list.
	S32 shopId_;
	S32 buyLimit_;
	// field ids.
	enum
	{
		FID_shopId_ = 0,
		FID_buyLimit_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_GuildShopItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildMember
struct COM_GuildMember
{
	// member list.
	S8 level_;
	S8 shopRefreshTimes_;
	U32 guildId_;
	S8 profType_;
	S8 profLevel_;
	S32 contribution_;
	S8 job_;
	S32 roleId_;
	U32 offlineTime_;
	std::string roleName_;
	U32 joinTime_;
	bool signflag_;
	std::vector< COM_GuildShopItem > shopItems_;
	// field ids.
	enum
	{
		FID_level_ = 0,
		FID_shopRefreshTimes_ = 1,
		FID_guildId_ = 2,
		FID_profType_ = 3,
		FID_profLevel_ = 4,
		FID_contribution_ = 5,
		FID_job_ = 6,
		FID_roleId_ = 7,
		FID_offlineTime_ = 8,
		FID_roleName_ = 9,
		FID_joinTime_ = 10,
		FID_signflag_ = 11,
		FID_shopItems_ = 12,
		FIDMAX = 13,
	};
	// constructor.
	COM_GuildMember();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_GuildViewerData
struct COM_GuildViewerData
{
	// member list.
	U32 guid_;
	std::string guildName_;
	std::string playerName_;
	std::string notice_;
	S8 level_;
	S16 memberNum_;
	S16 memberTotal_;
	S8 guildRank_;
	// field ids.
	enum
	{
		FID_guid_ = 0,
		FID_guildName_ = 1,
		FID_playerName_ = 2,
		FID_notice_ = 3,
		FID_level_ = 4,
		FID_memberNum_ = 5,
		FID_memberTotal_ = 6,
		FID_guildRank_ = 7,
		FIDMAX = 8,
	};
	// constructor.
	COM_GuildViewerData();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SearchContext
struct COM_SearchContext
{
	// member list.
	std::string title_;
	ItemSubType ist_;
	RaceType rt_;
	S32 itemId_;
	S32 babyId_;
	S32 begin_;
	S32 limit_;
	// field ids.
	enum
	{
		FID_title_ = 0,
		FID_ist_ = 1,
		FID_rt_ = 2,
		FID_itemId_ = 3,
		FID_babyId_ = 4,
		FID_begin_ = 5,
		FID_limit_ = 6,
		FIDMAX = 7,
	};
	// constructor.
	COM_SearchContext();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SellItem
struct COM_SellItem
{
	// member list.
	S32 guid_;
	S32 sellPlayerId_;
	S32 sellPrice;
	std::string title_;
	ItemSubType ist_;
	RaceType rt_;
	COM_Item item_;
	COM_BabyInst baby_;
	S32 time_;
	// field ids.
	enum
	{
		FID_guid_ = 0,
		FID_sellPlayerId_ = 1,
		FID_sellPrice = 2,
		FID_title_ = 3,
		FID_ist_ = 4,
		FID_rt_ = 5,
		FID_item_ = 6,
		FID_baby_ = 7,
		FID_time_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	COM_SellItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SelledItem
struct COM_SelledItem
{
	// member list.
	S32 guid_;
	S32 sellPlayerId_;
	S32 sellTime_;
	S32 selledTime_;
	S32 itemId_;
	S32 babyId_;
	S32 itemStack_;
	S32 price_;
	S32 tax_;
	// field ids.
	enum
	{
		FID_guid_ = 0,
		FID_sellPlayerId_ = 1,
		FID_sellTime_ = 2,
		FID_selledTime_ = 3,
		FID_itemId_ = 4,
		FID_babyId_ = 5,
		FID_itemStack_ = 6,
		FID_price_ = 7,
		FID_tax_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	COM_SelledItem();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_BuyContent
struct SGE_BuyContent
{
	// member list.
	S32 playerId_;
	S32 guid_;
	S32 diamond_;
	S32 magic_;
	bool isBabyFull_;
	bool isBagFull_;
	// field ids.
	enum
	{
		FID_playerId_ = 0,
		FID_guid_ = 1,
		FID_diamond_ = 2,
		FID_magic_ = 3,
		FID_isBabyFull_ = 4,
		FID_isBagFull_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	SGE_BuyContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_ScenePlayerInfo
struct SGE_ScenePlayerInfo
{
	// member list.
	S32 playerId_;
	S32 playerLevel_;
	S32 sceneId_;
	S32 entryId_;
	std::vector< S32 > currentQuestIds_;
	std::vector< S32 > accecptQuestIds_;
	std::vector< S32 > openScenes_;
	// field ids.
	enum
	{
		FID_playerId_ = 0,
		FID_playerLevel_ = 1,
		FID_sceneId_ = 2,
		FID_entryId_ = 3,
		FID_currentQuestIds_ = 4,
		FID_accecptQuestIds_ = 5,
		FID_openScenes_ = 6,
		FIDMAX = 7,
	};
	// constructor.
	SGE_ScenePlayerInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_SceneInfo
struct COM_SceneInfo
{
	// member list.
	S32 sceneId_;
	COM_FPosition position_;
	std::vector< COM_ScenePlayerInformation > players_;
	std::vector< S32 > npcs_;
	// field ids.
	enum
	{
		FID_sceneId_ = 0,
		FID_position_ = 1,
		FID_players_ = 2,
		FID_npcs_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_SceneInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ReconnectInfo
struct COM_ReconnectInfo
{
	// member list.
	ReconnectType reconnectProcess_;
	std::string sessionKey_;
	std::vector< COM_SimpleInformation > roles_;
	COM_PlayerInst playerInst_;
	COM_SceneInfo sceneInfo_;
	COM_TeamInfo team_;
	COM_InitBattle initBattle_;
	// field ids.
	enum
	{
		FID_reconnectProcess_ = 0,
		FID_sessionKey_ = 1,
		FID_roles_ = 2,
		FID_playerInst_ = 3,
		FID_sceneInfo_ = 4,
		FID_team_ = 5,
		FID_initBattle_ = 6,
		FIDMAX = 7,
	};
	// constructor.
	COM_ReconnectInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Notice
struct COM_Notice
{
	// member list.
	NoticeSendType SendType_;
	std::string note_;
	F32 accumulate_;
	F32 startTime_;
	F32 stopTime_;
	F32 interval_;
	bool validate_;
	// field ids.
	enum
	{
		FID_SendType_ = 0,
		FID_note_ = 1,
		FID_accumulate_ = 2,
		FID_startTime_ = 3,
		FID_stopTime_ = 4,
		FID_interval_ = 5,
		FID_validate_ = 6,
		FIDMAX = 7,
	};
	// constructor.
	COM_Notice();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ShowItemInst
struct COM_ShowItemInst
{
	// member list.
	S32 showId_;
	std::string playerName_;
	COM_Item itemInst_;
	// field ids.
	enum
	{
		FID_showId_ = 0,
		FID_playerName_ = 1,
		FID_itemInst_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ShowItemInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ShowItemInstInfo
struct COM_ShowItemInstInfo
{
	// member list.
	S32 showId_;
	std::string playerName_;
	U32 itemId_;
	// field ids.
	enum
	{
		FID_showId_ = 0,
		FID_playerName_ = 1,
		FID_itemId_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ShowItemInstInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ShowbabyInst
struct COM_ShowbabyInst
{
	// member list.
	S32 showId_;
	std::string playerName_;
	COM_BabyInst babyInst_;
	// field ids.
	enum
	{
		FID_showId_ = 0,
		FID_playerName_ = 1,
		FID_babyInst_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ShowbabyInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_ShowbabyInstInfo
struct COM_ShowbabyInstInfo
{
	// member list.
	S32 showId_;
	std::string playerName_;
	U32 babyId_;
	// field ids.
	enum
	{
		FID_showId_ = 0,
		FID_playerName_ = 1,
		FID_babyId_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_ShowbabyInstInfo();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_Account
struct SGE_Account
{
	// member list.
	std::string gamename_;
	std::string pfid_;
	std::string pfname_;
	std::string accountid_;
	U64 createtime_;
	std::string mac_;
	std::string idfa_;
	std::string ip_;
	std::string devicetype_;
	// field ids.
	enum
	{
		FID_gamename_ = 0,
		FID_pfid_ = 1,
		FID_pfname_ = 2,
		FID_accountid_ = 3,
		FID_createtime_ = 4,
		FID_mac_ = 5,
		FID_idfa_ = 6,
		FID_ip_ = 7,
		FID_devicetype_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	SGE_Account();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_Login
struct SGE_Login
{
	// member list.
	std::string gamename_;
	std::string pfid_;
	std::string pfname_;
	std::string accountid_;
	U32 roleId_;
	U64 logintime_;
	U64 logouttime_;
	U64 firsttime_;
	U64 rolefirsttime_;
	U32 firstserid_;
	U32 serverid_;
	std::string mac_;
	std::string idfa_;
	std::string ip_;
	std::string devicetype_;
	// field ids.
	enum
	{
		FID_gamename_ = 0,
		FID_pfid_ = 1,
		FID_pfname_ = 2,
		FID_accountid_ = 3,
		FID_roleId_ = 4,
		FID_logintime_ = 5,
		FID_logouttime_ = 6,
		FID_firsttime_ = 7,
		FID_rolefirsttime_ = 8,
		FID_firstserid_ = 9,
		FID_serverid_ = 10,
		FID_mac_ = 11,
		FID_idfa_ = 12,
		FID_ip_ = 13,
		FID_devicetype_ = 14,
		FIDMAX = 15,
	};
	// constructor.
	SGE_Login();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_Order
struct SGE_Order
{
	// member list.
	std::string gamename_;
	std::string pfid_;
	std::string pfname_;
	std::string orderid_;
	U32 roleId_;
	U32 rolelv_;
	std::string accountid_;
	F32 payment_;
	std::string paytime_;
	// field ids.
	enum
	{
		FID_gamename_ = 0,
		FID_pfid_ = 1,
		FID_pfname_ = 2,
		FID_orderid_ = 3,
		FID_roleId_ = 4,
		FID_rolelv_ = 5,
		FID_accountid_ = 6,
		FID_payment_ = 7,
		FID_paytime_ = 8,
		FIDMAX = 9,
	};
	// constructor.
	SGE_Order();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_LogUIBehavior
struct SGE_LogUIBehavior
{
	// member list.
	U32 accountGuid_;
	std::string accountName_;
	U32 playerGuid_;
	std::string playerName_;
	std::string clientIp_;
	UIBehaviorType type_;
	// field ids.
	enum
	{
		FID_accountGuid_ = 0,
		FID_accountName_ = 1,
		FID_playerGuid_ = 2,
		FID_playerName_ = 3,
		FID_clientIp_ = 4,
		FID_type_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	SGE_LogUIBehavior();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_LogRole
struct SGE_LogRole
{
	// member list.
	std::string gamename_;
	std::string pfid_;
	std::string pfname_;
	U32 roleid_;
	U64 cachetime_;
	std::string accountid_;
	S8 serverid_;
	std::string servername_;
	S8 firstserid_;
	U64 rolefirsttime_;
	U64 rolelasttime_;
	S8 rolelv_;
	S64 gold_;
	S64 diamond_;
	S64 magicgold_;
	S8 vip_;
	S64 ce_;
	// field ids.
	enum
	{
		FID_gamename_ = 0,
		FID_pfid_ = 1,
		FID_pfname_ = 2,
		FID_roleid_ = 3,
		FID_cachetime_ = 4,
		FID_accountid_ = 5,
		FID_serverid_ = 6,
		FID_servername_ = 7,
		FID_firstserid_ = 8,
		FID_rolefirsttime_ = 9,
		FID_rolelasttime_ = 10,
		FID_rolelv_ = 11,
		FID_gold_ = 12,
		FID_diamond_ = 13,
		FID_magicgold_ = 14,
		FID_vip_ = 15,
		FID_ce_ = 16,
		FIDMAX = 17,
	};
	// constructor.
	SGE_LogRole();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_LogProduceTrack
struct SGE_LogProduceTrack
{
	// member list.
	U64 timestamp_;
	S32 from_;
	U32 playerId_;
	std::string playerName_;
	U32 itemId_;
	U32 itemInstId_;
	S32 itemStack_;
	S32 diamond_;
	S32 money_;
	S32 exp_;
	S32 magic_;
	// field ids.
	enum
	{
		FID_timestamp_ = 0,
		FID_from_ = 1,
		FID_playerId_ = 2,
		FID_playerName_ = 3,
		FID_itemId_ = 4,
		FID_itemInstId_ = 5,
		FID_itemStack_ = 6,
		FID_diamond_ = 7,
		FID_money_ = 8,
		FID_exp_ = 9,
		FID_magic_ = 10,
		FIDMAX = 11,
	};
	// constructor.
	SGE_LogProduceTrack();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Exam
struct COM_Exam
{
	// member list.
	U8 questionIndex_;
	U8 rightNum_;
	U8 errorNum_;
	U32 money_;
	U32 exp_;
	std::vector< U32 > questions_;
	// field ids.
	enum
	{
		FID_questionIndex_ = 0,
		FID_rightNum_ = 1,
		FID_errorNum_ = 2,
		FID_money_ = 3,
		FID_exp_ = 4,
		FID_questions_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_Exam();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Answer
struct COM_Answer
{
	// member list.
	U8 questionIndex_;
	U32 money_;
	U32 exp_;
	bool isRigth_;
	// field ids.
	enum
	{
		FID_questionIndex_ = 0,
		FID_money_ = 1,
		FID_exp_ = 2,
		FID_isRigth_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_Answer();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Wishing
struct COM_Wishing
{
	// member list.
	WishType wt_;
	std::string wish_;
	// field ids.
	enum
	{
		FID_wt_ = 0,
		FID_wish_ = 1,
		FIDMAX = 2,
	};
	// constructor.
	COM_Wishing();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_Wish
struct COM_Wish
{
	// member list.
	U32 playerInstId_;
	std::string playerName_;
	std::string wish_;
	// field ids.
	enum
	{
		FID_playerInstId_ = 0,
		FID_playerName_ = 1,
		FID_wish_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	COM_Wish();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_GmtOrder
struct SGE_GmtOrder
{
	// member list.
	S32 shopId_;
	std::string orderId_;
	F32 payment_;
	// field ids.
	enum
	{
		FID_shopId_ = 0,
		FID_orderId_ = 1,
		FID_payment_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	SGE_GmtOrder();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_KeyContent
struct COM_KeyContent
{
	// member list.
	std::string giftname_;
	std::string pfid_;
	std::string key_;
	std::string playerName_;
	S64 usetime_;
	std::vector< COM_GiftItem > items_;
	// field ids.
	enum
	{
		FID_giftname_ = 0,
		FID_pfid_ = 1,
		FID_key_ = 2,
		FID_playerName_ = 3,
		FID_usetime_ = 4,
		FID_items_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	COM_KeyContent();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct COM_EmployeeQuestInst
struct COM_EmployeeQuestInst
{
	// member list.
	EmployeeQuestStatus status_;
	S32 questId_;
	S32 timeout_;
	std::vector< S32 > usedEmployees_;
	// field ids.
	enum
	{
		FID_status_ = 0,
		FID_questId_ = 1,
		FID_timeout_ = 2,
		FID_usedEmployees_ = 3,
		FIDMAX = 4,
	};
	// constructor.
	COM_EmployeeQuestInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_EmployeeQuestInst
struct SGE_EmployeeQuestInst : public COM_EmployeeQuestInst
{
	// member list.
	S64 doTime_;
	S64 refreshTime_;
	// field ids.
	enum
	{
		FID_doTime_ = 4,
		FID_refreshTime_ = 5,
		FIDMAX = 6,
	};
	// constructor.
	SGE_EmployeeQuestInst();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_PlayerEmployeeQuestArray
struct SGE_PlayerEmployeeQuestArray
{
	// member list.
	std::vector< SGE_EmployeeQuestInst > value_;
	// field ids.
	enum
	{
		FID_value_ = 0,
		FIDMAX = 1,
	};
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
//=============================================================
// struct SGE_PlayerEmployeeQuest
struct SGE_PlayerEmployeeQuest
{
	// member list.
	S32 playerId_;
	std::vector< S32 > usedEmployees_;
	std::vector< SGE_PlayerEmployeeQuestArray > quests_;
	// field ids.
	enum
	{
		FID_playerId_ = 0,
		FID_usedEmployees_ = 1,
		FID_quests_ = 2,
		FIDMAX = 3,
	};
	// constructor.
	SGE_PlayerEmployeeQuest();
	// serialization.
	void serialize(ProtocolWriter* s) const;
	// deserialization.
	bool deserialize(ProtocolReader* r);
	void serializeJson(std::ostream& ss, bool needBracket = true)const;
};
#endif
