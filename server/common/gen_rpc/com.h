/* This file is generated by arpcc, do not change manually! */
#ifndef __com_h__
#define __com_h__
#include "ProtocolWriter.h"
#include "ProtocolReader.h"
#include "EnumInfo.h"
//=============================================================
// enum MajorVersion
enum MajorVersion : S32
{
	Major_0,
	MajorNumber,
};
extern EnumInfo enumMajorVersion;
//=============================================================
// enum MinorVersion
enum MinorVersion : S32
{
	Minor_0,
	Minor_1,
	Minor_2,
	Minor_3,
	Minor_4,
	Minor_5,
	Minor_6,
	MinorNumber,
};
extern EnumInfo enumMinorVersion;
//=============================================================
// enum PatchVersion
enum PatchVersion : S32
{
	Patch_0,
	Patch_1,
	Patch_2,
	Patch_3,
	Patch_4,
	Patch_5,
	PatchNumber,
};
extern EnumInfo enumPatchVersion;
//=============================================================
// enum PetQuality
enum PetQuality : S32
{
	PE_None,
	PE_White,
	PE_Green,
	PE_Blue,
	PE_Purple,
	PE_Golden,
	PE_Orange,
	PE_Pink,
};
extern EnumInfo enumPetQuality;
//=============================================================
// enum ErrorNo
enum ErrorNo : S32
{
	EN_None,
	EN_VersionNotMatch,
	EN_AccountNameSame,
	EN_PlayerNameSame,
	EN_FilterWord,
	EN_CannotfindPlayer,
	EN_AcceptQuestNotFound,
	EN_AcceptQuestNoItem,
	EN_AcceptSecendDaily,
	EN_DailyNoNum,
	EN_AcceptSecendProfession,
	EN_Battle,
	EN_MoneyLess,
	EN_DiamondLess,
	EN_NoSubSyste,
	EN_InTeam,
	EN_NoTeamLeader,
	EN_TeamPassword,
	EN_TeamIsFull,
	EN_NoTeam,
	EN_TeamIsRunning,
	EN_TeamMemberLeaving,
	EN_NoBackTeam,
	EN_InTeamBlackList,
	EN_EmployeeIsFull,
	EN_NoUpSkill,
	EN_PropisNull,
	EN_DoubleExpTimeFull,
	EN_DoubleExpTimeNULL,
	EN_NoTeamNoTongji,
	EN_TongjiTimesMax,
	EN_TongjiTeamMemberTimesMax,
	EN_NoTeamLeaderNoTongji,
	EN_TeamSizeTongjiError,
	EN_GetPoisonMushroom,
	EN_GetMushroom,
	EN_TongjiTeamLevelTooLow,
	EN_PlayerIsInTeam,
	EN_AcceptQuestBagMax,
	EN_SubmitQuestBagMax,
	EN_GuildNameSame,
	EN_PlayerGoldLess,
	EN_PlayerHasGuild,
	EN_InRequestErr,
	EN_RequestListFull,
	EN_joinGuildRequestOk,
	EN_JoinOtherGuild,
	EN_PremierQuitError,
	EN_CommandPositionLess,
	EN_PositionUpMax,
	EN_MallBuyOk,
	EN_MallBuyFailBagFull,
	EN_MallBuyFailBabyFull,
	EN_MallBuyFailDiamondLess,
	EN_MallBuyFailSelled,
	EN_OpenBaoXiangBagFull,
	EN_NoBaby,
	EN_BagFull,
	EN_BagSizeMax,
	EN_BabyStorageFull,
	EN_BabyFullToStorage,
	EN_NewItemError,
	EN_BabyFull,
	EN_RemouldBabyLevel,
	EN_SkillSoltFull,
	EN_WorldChatPayError,
	EN_DontTalk,
	EN_BadMushroom,
	EN_ItemMushroom,
	EN_GetMailItemBagFull,
	EN_Materialless,
	EN_OpenGatherlose,
	EN_OpenGatherRepetition,
	EN_GatherLevelLess,
	EN_GatherTimesLess,
	EN_OpenBaoXiangLevel,
	EN_NoBattleBaby,
	EN_NoThisPoint,
	EN_BabyLevelHigh,
	EN_AddMoney1W,
	EN_AddDionmand100,
	EN_AddMoney2W,
	EN_AddDionmand200,
	EN_AddMoney3W,
	EN_AddDionmand300,
	EN_AddMoney4W,
	EN_AddDionmand400,
	EN_AddMoney5W,
	EN_AddDionmand500,
	EN_AddMoney6W,
	EN_AddDionmand600,
	EN_DelBaby1000,
	EN_DelBaby30,
	EN_DelBaby54,
	EN_DelBaby10030,
	EN_DelBaby10015,
	EN_DelBaby10157,
	EN_DelDefaultSkill,
	EN_GreenBoxFreeNum,
	EM_NotNormalVip,
	EN_NotSuperVip,
	EN_FirendNotOpen,
	EN_BlackCannotFriend,
	EN_HasFriend,
	EN_HunderdNoNum,
	EN_HunderdTier,
	EN_HunderdLevel,
	EN_SkillExperr,
	EN_TimeMushroom,
	EN_TimeTongji,
	EN_TimeXiji,
	EN_Storefull,
	EN_HasBattleTime,
	EN_HourLess24,
	EN_HourLess24_Join,
	EN_TeamMemberHourLess24,
	EN_GuildBattleJoinSceneMoveValue,
	EN_IdgenNull,
	EN_Idgenhas,
	EN_Gifthas,
	EN_UseMakeRepeat,
	EN_WishNull,
	EN_NoGuild,
	EN_GuildMemberMax,
	EN_LevelupGuildBuilding,
	EN_LevelupGuildBuildingLevelMax,
	EN_LevelupGuildBuildingMoneyLess,
	EN_LevelupGuildBuildingHallBuildLevelLess,
	EN_AddGuildMoneyMax,
	EN_PresentGuildOk,
	EN_RefreshShopTimeLess,
	EN_TeamMemberNoGuild,
	EN_MagicCurrencyLess,
	EN_DisShopLimitLess,
	EN_FamilyPremierCanntDelete,
	EN_MyFamilyMonster,
	EN_NoBattleTime,
	EN_OtherNoBattleTime,
	EN_GuildBattleTimeout2,
	EN_GuildBattleHasTeam,
	EN_AccountIsSeal,
	EN_PlayerNoOnline,
	EN_ActivityNoTime,
	EN_NoTeamExist,
	EN_GuildNoMember,
	EN_MallSellTimeLess,
	EN_GuildMemberLess24,
	EN_InviteeLeaveGuildLess24,
	EN_PboneNumberSuccess,
	EN_PhoneNumberError,
	EN_OtherPlayerInBattle,
	EN_GuildBattleNotMatch,
	EN_GuildBattleIsStart,
	EN_GuileBattleIsClose,
	EN_GuildBattleTeamNoSameGuild,
	EN_BackTeamCommandLeaderInGuildHomeSceneAndYouAreNotSameGuild,
	EN_AccecptRandQuestSizeLimitError,
	EN_Max,
};
extern EnumInfo enumErrorNo;
//=============================================================
// enum OperateType
enum OperateType : S32
{
	OT_0,
	OT_P1,
	OT_P2,
	OT_B,
};
extern EnumInfo enumOperateType;
//=============================================================
// enum BindType
enum BindType : S32
{
	BIT_None,
	BIT_Bag,
	BIT_Use,
	BIT_Max,
};
extern EnumInfo enumBindType;
//=============================================================
// enum ReconnectType
enum ReconnectType : S32
{
	RECT_None,
	RECT_LoginOk,
	RECT_EnterGameOk,
	RECT_JoinTeamOk,
	RECT_EnterSceneOk,
	RECT_EnterBattleOk,
	RECT_Max,
};
extern EnumInfo enumReconnectType;
//=============================================================
// enum SexType
enum SexType : S32
{
	ST_Unknown,
	ST_Male,
	ST_Female,
};
extern EnumInfo enumSexType;
//=============================================================
// enum BattleType
enum BattleType : S32
{
	BT_None,
	BT_PVE,
	BT_PVR,
	BT_PVP,
	BT_PVH,
	BT_PET,
	BT_PK1,
	BT_PK2,
	BT_Guild,
	BT_MAX,
};
extern EnumInfo enumBattleType;
//=============================================================
// enum EntityType
enum EntityType : S32
{
	ET_None,
	ET_Player,
	ET_Baby,
	ET_Monster,
	ET_Boss,
	ET_Emplyee,
	ET_Max,
};
extern EnumInfo enumEntityType;
//=============================================================
// enum MineType
enum MineType : S32
{
	MT_None,
	MT_JinShu,
	MT_MuCai,
	MT_BuLiao,
	MT_Max,
};
extern EnumInfo enumMineType;
//=============================================================
// enum GroupType
enum GroupType : S32
{
	GT_None,
	GT_Up,
	GT_Down,
};
extern EnumInfo enumGroupType;
//=============================================================
// enum SkillTargetType
enum SkillTargetType : S32
{
	STT_None,
	STT_Self,
	STT_Team,
	STT_TeamDead,
	STT_TeamNoSelf,
	STT_All,
	STT_AllNoSelf,
	STT_Max,
};
extern EnumInfo enumSkillTargetType;
//=============================================================
// enum SkillType
enum SkillType : S32
{
	SKT_None,
	SKT_DefaultSecActive,
	SKT_DefaultSecPassive,
	SKT_DefaultActive,
	SKT_DefaultPassive,
	SKT_Active,
	SKT_Passive,
	SKT_Gather,
	SKT_Make,
	SKT_CannotUse,
	SKT_GuildPlayerSkill,
	SKT_GuildBabySkill,
	SKT_Max,
};
extern EnumInfo enumSkillType;
//=============================================================
// enum PassiveType
enum PassiveType : S32
{
	PAT_None,
	PAT_Buff,
	PAT_Deference,
	PAT_Dodge,
	PAT_Counter,
	PAT_Change,
	PAT_Guard,
	PAT_Runaway,
	PAT_BabyInnout,
	PAT_SecKill,
};
extern EnumInfo enumPassiveType;
//=============================================================
// enum PlayerStatus
enum PlayerStatus : S32
{
	PS_Idle,
	PS_Login,
	PS_Game,
	PS_Logout,
	PS_Illegal,
};
extern EnumInfo enumPlayerStatus;
//=============================================================
// enum OccupationType
enum OccupationType : S32
{
	OT_None,
	OT_HeavyArmor,
	OT_LightArmor,
	OT_Spell,
	OT_Max,
};
extern EnumInfo enumOccupationType;
//=============================================================
// enum PeriodType
enum PeriodType : S32
{
	PT_Daily,
	PT_Weekly,
	PT_Customly,
};
extern EnumInfo enumPeriodType;
//=============================================================
// enum JobType
enum JobType : S32
{
	JT_None,
	JT_Newbie,
	JT_Axe,
	JT_Sword,
	JT_Knight,
	JT_Archer,
	JT_Fighter,
	JT_Ninja,
	JT_Mage,
	JT_Sage,
	JT_Wizard,
	JT_Word,
};
extern EnumInfo enumJobType;
//=============================================================
// enum RaceType
enum RaceType : S32
{
	RT_None,
	RT_Human,
	RT_Insect,
	RT_Plant,
	RT_Extra,
	RT_Dragon,
	RT_Animal,
	RT_Fly,
	RT_Undead,
	RT_Metal,
	RT_Max,
};
extern EnumInfo enumRaceType;
//=============================================================
// enum BabyInitGear
enum BabyInitGear : S32
{
	BIG_None,
	BIG_Stama,
	BIG_Strength,
	BIG_Power,
	BIG_Speed,
	BIG_Magic,
	BIG_Max,
};
extern EnumInfo enumBabyInitGear;
//=============================================================
// enum QualityColor
enum QualityColor : S32
{
	QC_None,
	QC_White,
	QC_Green,
	QC_Blue,
	QC_Blue1,
	QC_Purple,
	QC_Purple1,
	QC_Purple2,
	QC_Golden,
	QC_Golden1,
	QC_Golden2,
	QC_Orange,
	QC_Orange1,
	QC_Orange2,
	QC_Pink,
	QC_Max,
};
extern EnumInfo enumQualityColor;
//=============================================================
// enum PropertyType
enum PropertyType : S32
{
	PT_None,
	PT_NoSleep,
	PT_NoPetrifaction,
	PT_NoDrunk,
	PT_NoChaos,
	PT_NoForget,
	PT_NoPoison,
	PT_Assassinate,
	PT_Money,
	PT_Diamond,
	PT_MagicCurrency,
	PT_EmployeeCurrency,
	PT_Gather,
	PT_Level,
	PT_Exp,
	PT_ConvertExp,
	PT_OneDayReputation,
	PT_Reputation,
	PT_TableId,
	PT_AssetId,
	PT_Sex,
	PT_BagNum,
	PT_Race,
	PT_Profession,
	PT_ProfessionLevel,
	PT_Stama,
	PT_Strength,
	PT_Power,
	PT_Speed,
	PT_Magic,
	PT_Durability,
	PT_HpCurr,
	PT_MpCurr,
	PT_HpMax,
	PT_MpMax,
	PT_Attack,
	PT_Defense,
	PT_Agile,
	PT_Spirit,
	PT_Reply,
	PT_Magicattack,
	PT_Magicdefense,
	PT_Damage,
	PT_SneakAttack,
	PT_Hit,
	PT_Dodge,
	PT_Crit,
	PT_counterpunch,
	PT_Front,
	PT_Wind,
	PT_Land,
	PT_Water,
	PT_Fire,
	PT_Free,
	PT_Title,
	PT_GuildID,
	PT_Glamour,
	PT_DoubleExp,
	PT_TongjiComplateTimes,
	PT_VipLevel,
	PT_VipTime,
	PT_FightingForce,
	PT_Max,
};
extern EnumInfo enumPropertyType;
//=============================================================
// enum VipLevel
enum VipLevel : S32
{
	VL_None,
	VL_1,
	VL_2,
	VL_Max,
};
extern EnumInfo enumVipLevel;
//=============================================================
// enum ItemMainType
enum ItemMainType : S32
{
	IMT_None,
	IMT_Quest,
	IMT_Consumables,
	IMT_Equip,
	IMT_Employee,
	IMT_EmployeeEquip,
	IMT_Debris,
	IMT_FuWen,
	IMT_BabyEquip,
	IMT_Max,
};
extern EnumInfo enumItemMainType;
//=============================================================
// enum ItemSubType
enum ItemSubType : S32
{
	IST_None,
	IST_Axe,
	IST_Sword,
	IST_Spear,
	IST_Bow,
	IST_Stick,
	IST_Knife,
	IST_Hat,
	IST_Helmet,
	IST_Clothes,
	IST_Robe,
	IST_Armor,
	IST_Boot,
	IST_Shoes,
	IST_Shield,
	IST_Crystal,
	IST_Charm,
	IST_Earrings,
	IST_Bracelet,
	IST_Ring,
	IST_Necklace,
	IST_Headband,
	IST_Instruments,
	IST_EquipMax,
	IST_Ornament,
	IST_Lottery,
	IST_Coupun,
	IST_OpenGird,
	IST_ConsBegin,
	IST_Consumables,
	IST_Blood,
	IST_Buff,
	IST_Gem,
	IST_Material,
	IST_ItemDebris,
	IST_BabyDebris,
	IST_EmployeeDebris,
	IST_BabyExp,
	IST_SkillExp,
	IST_ConsEnd,
	IST_Gloves,
	IST_EmployeeEquip,
	IST_PVP,
	IST_Fashion,
	IST_FuWenAttack,
	IST_FuWenDefense,
	IST_FuWenAssist,
	IST_Max,
};
extern EnumInfo enumItemSubType;
//=============================================================
// enum ItemUseFlag
enum ItemUseFlag : S32
{
	IUF_None,
	IUF_Battle,
	IUF_Scene,
	IUF_All,
};
extern EnumInfo enumItemUseFlag;
//=============================================================
// enum EquipmentSlot
enum EquipmentSlot : S32
{
	ES_None,
	ES_Boot,
	ES_SingleHand,
	ES_Ornament_0,
	ES_Head,
	ES_Ornament_1,
	ES_Body,
	ES_DoubleHand,
	ES_Crystal,
	ES_Fashion,
	ES_Max,
};
extern EnumInfo enumEquipmentSlot;
//=============================================================
// enum WeaponType
enum WeaponType : S32
{
	WT_None,
	WT_Axe,
	WT_Sword,
	WT_Spear,
	WT_Bow,
	WT_Stick,
	WT_Knife,
	WT_Hoe,
	WT_Pickax,
	WT_Lumberaxe,
	WT_Gloves,
	WT_Max,
};
extern EnumInfo enumWeaponType;
//=============================================================
// enum ChatKind
enum ChatKind : S32
{
	CK_None,
	CK_World,
	CK_Team,
	CK_System,
	CK_Friend,
	CK_GM,
	CK_Guild,
	CK_Max,
};
extern EnumInfo enumChatKind;
//=============================================================
// enum BattlePosition
enum BattlePosition : S32
{
	BP_None,
	BP_Down0,
	BP_Down1,
	BP_Down2,
	BP_Down3,
	BP_Down4,
	BP_Down5,
	BP_Down6,
	BP_Down7,
	BP_Down8,
	BP_Down9,
	BP_Up0,
	BP_Up1,
	BP_Up2,
	BP_Up3,
	BP_Up4,
	BP_Up5,
	BP_Up6,
	BP_Up7,
	BP_Up8,
	BP_Up9,
	BP_Max,
};
extern EnumInfo enumBattlePosition;
//=============================================================
// enum BattleJudgeType
enum BattleJudgeType : S32
{
	BJT_None,
	BJT_Continue,
	BJT_Win,
	BJT_Lose,
};
extern EnumInfo enumBattleJudgeType;
//=============================================================
// enum OrderParamType
enum OrderParamType : S32
{
	OPT_None,
	OPT_BabyId,
	OPT_Unite,
	OPT_Huwei,
	OPT_IsNo,
	OPT_Max,
};
extern EnumInfo enumOrderParamType;
//=============================================================
// enum OrderStatus
enum OrderStatus : S32
{
	OS_None,
	OS_ActiveOk,
	OS_RunawayOk,
	OS_FangBaobao,
	OS_ShouBaobao,
	OS_Weapon,
	OS_Zhuachong,
	OS_Flee,
	OS_Summon,
};
extern EnumInfo enumOrderStatus;
//=============================================================
// enum AIEvent
enum AIEvent : S32
{
	ME_None,
	ME_Born,
	ME_Deadth,
	ME_AttackGo,
	ME_SkillGO,
	ME_Update,
	ME_Max,
};
extern EnumInfo enumAIEvent;
//=============================================================
// enum SyncIPropType
enum SyncIPropType : S32
{
	SPT_None,
	SPT_Player,
	SPT_Baby,
	SPT_Employee,
	SPT_Max,
};
extern EnumInfo enumSyncIPropType;
//=============================================================
// enum BoxType
enum BoxType : S32
{
	BX_None,
	BX_Normal,
	BX_Blue,
	BX_Glod,
};
extern EnumInfo enumBoxType;
//=============================================================
// enum QuestKind
enum QuestKind : S32
{
	QK_None,
	QK_Main,
	QK_Daily,
	QK_Profession,
	QK_Sub,
	QK_Tongji,
	QK_Copy,
	QK_Wishing,
	QK_Guild,
	QK_Rand,
	QK_Sub1,
	QK_Max,
};
extern EnumInfo enumQuestKind;
//=============================================================
// enum QuestType
enum QuestType : S32
{
	QT_None,
	QT_Dialog,
	QT_Battle,
	QT_Kill,
	QT_KillAI,
	QT_Item,
	QT_Profession,
	QT_Other,
	QT_GiveItem,
	QT_GiveBaby,
	QT_Max,
};
extern EnumInfo enumQuestType;
//=============================================================
// enum RequireType
enum RequireType : S32
{
	RT_Nil,
};
extern EnumInfo enumRequireType;
//=============================================================
// enum TeamType
enum TeamType : S32
{
	TT_None,
	TT_MainQuest,
	TT_TongjiQuest,
	TT_Daochang,
	TT_CaoMoGu,
	TT_Zhanchang,
	TT_Hero,
	TT_Pet,
	TT_JJC,
	TT_ShuaGuai,
	TT_Copy,
	TT_Max,
};
extern EnumInfo enumTeamType;
//=============================================================
// enum StateType
enum StateType : S32
{
	ST_None,
	ST_Normal,
	ST_Defense,
	ST_Dodge,
	ST_ActionAbsorb,
	ST_MagicAbsorb,
	ST_Shield,
	ST_ActionBounce,
	ST_MagicBounce,
	ST_ActionInvalid,
	ST_MagicInvalid,
	ST_Defend,
	ST_NoDodge,
	ST_Poison,
	ST_Basilisk,
	ST_Sleep,
	ST_Chaos,
	ST_Drunk,
	ST_Forget,
	ST_BeatBack,
	ST_Recover,
	ST_StrongRecover,
	ST_GroupRecover,
	ST_MagicDef,
	ST_Max,
};
extern EnumInfo enumStateType;
//=============================================================
// enum SceneType
enum SceneType : S32
{
	SCT_None,
	SCT_New,
	SCT_Home,
	SCT_Scene,
	SCT_City,
	SCT_Bairen,
	SCT_Instance,
	SCT_AlonePK,
	SCT_TeamPK,
	SCT_GuildHome,
	SCT_GuildBattleScene,
	SCT_Max,
};
extern EnumInfo enumSceneType;
//=============================================================
// enum BornType
enum BornType : S32
{
	BOT_None,
	BOT_BornPos,
	BOT_Cached,
	BOT_FromSceneEntry,
	BOT_FromMazeEntry,
	BOT_NormalMazeEntry,
	BOT_Max,
};
extern EnumInfo enumBornType;
//=============================================================
// enum WeaponActionType
enum WeaponActionType : S32
{
	WAT_None,
	WAT_Chop,
	WAT_Stab,
	WAT_Bow,
	WAT_Throw,
	WAT_Max,
};
extern EnumInfo enumWeaponActionType;
//=============================================================
// enum SceneOutpuType
enum SceneOutpuType : S32
{
	SOT_None,
	SOT_PVE,
	SOT_PVP,
	SOT_Max,
};
extern EnumInfo enumSceneOutpuType;
//=============================================================
// enum TogetherStateType
enum TogetherStateType : S32
{
	TST_None,
	TST_Self,
	TST_Enemy,
	TST_Max,
};
extern EnumInfo enumTogetherStateType;
//=============================================================
// enum GuideAimType
enum GuideAimType : S32
{
	GAT_None,
	GAT_FirstAchievement,
	GAT_FirstSkill,
	GAT_FirstLevelSkill,
	GAT_FirstQuest,
	GAT_DialogUI,
	GAT_MainTeamBtn,
	GAT_MainTaskBtn,
	GAT_QuestMiniFirst,
	GAT_QuestMiniSecond,
	GAT_QuestMiniThird,
	GAT_MainCrystal,
	GAT_MainCastle,
	GAT_MainJJC,
	GAT_OfflineJJC,
	GAT_OfflineJJC4,
	GAT_WorldMapER,
	GAT_WorldMapFL,
	GAT_WorldMapWorldBtn,
	GAT_MiniMap,
	GAT_TeamCreateBtn,
	GAT_TeamWorldMapBtn,
	GAT_FirstPartner_PosUI,
	GAT_FreeLootPartner,
	GAT_FriendAddBtn,
	GAT_PartnerShowCancel,
	GAT_PartnerPositionTab,
	GAT_PartnerDetailBaseTab,
	GAT_PartnerDetailBodySlot,
	GAT_PartnerDetailEquipBtn,
	GAT_PartnerDetailBaseFirstSkill,
	GAT_PartnerDetailBaseSkillLvUpBtn,
	GAT_LearnSkillAttackSkillTab,
	GAT_LearnSkillAttackMagicTab,
	GAT_LearnSkillStatusMagicTab,
	GAT_LearnSkillAidSkillTab,
	GAT_LearnSkillBtn,
	GAT_FirstLearningBabySkill,
	GAT_FirstLearningBabySkill_BabyList,
	GAT_ThirdLearningBabySkill_SkillSlot,
	GAT_BabySkillLearningBtn,
	GAT_MessageBoxOkBtn,
	GAT_MainReturn,
	GAT_MainBag,
	GAT_MainBagTipUseItem,
	GAT_MainbagTipEquip,
	GAT_MainBagFuwenTab,
	GAT_MainBagFuwenFirstItem,
	GAT_MainBagFuwenTipsCombieBtn,
	GAT_MainBagFuwenTipsInsertBtn,
	GAT_MainFuwenUICombieBtn,
	GAT_MainFuwenCloseBtn,
	GAT_MainSkill,
	GAT_MainMake,
	GAT_MainMakeSword,
	GAT_MainMakeAxe,
	GAT_MainMakeStick,
	GAT_MainMakeBow,
	GAT_MainMakeCompoundBtn,
	GAT_MainMakeLevel10,
	GAT_MainMakeSubFirst,
	GAT_MainMakeSubSecond,
	GAT_MainMakeSubThird,
	GAT_MainMakeGemBtn,
	GAT_MainMakeGemClose,
	GAT_MainMakeGemFirst,
	GAT_MainBaby,
	GAT_MainBabyStatusBtn,
	GAT_MainBabyPropertyBtn,
	GAT_MainBabyPropertyContainer,
	GAT_MainBabyPropertyConfirm,
	GAT_MainBabyClose,
	GAT_MainMagic,
	GAT_MainMagicLevelFirst,
	GAT_MainMagicLevelBtn,
	GAT_MainFriend,
	GAT_MainPartner,
	GAT_MainSetting,
	GAT_MainRecharge,
	GAT_MainActivity,
	GAT_MainPlayerInfo,
	GAT_MainPlayerInfoStatusBtn,
	GAT_MainPlayerInfoPropertyBtn,
	GAT_MainPlayerInfoPropertyContainer,
	GAT_MainPlayerInfoPropertyConfirm,
	GAT_MainPlayerInfoClose,
	GAT_MainJiubaHouse,
	GAT_MainStick,
	GAT_MainAchievement,
	GAT_MainRaise,
	GAT_MainFamily,
	GAT_BattleAttack,
	GAT_BattleSkill,
	GAT_BattleBabySkill,
	GAT_BattleDeference,
	GAT_BattleChangePosition,
	GAT_BattleAuto,
	GAT_BattleBag,
	GAT_BattleCatch,
	GAT_BattleBaby,
	GAT_BattleRunaway,
	GAT_BattlePlayerInfo,
	GAT_BattleRewardClose,
	GAT_FirstAutoSkill,
	GAT_PlayerAuto,
	GAT_Max,
};
extern EnumInfo enumGuideAimType;
//=============================================================
// enum ScriptGameEvent
enum ScriptGameEvent : S32
{
	SGE_None,
	SGE_MainPanelOpen,
	SGE_FirstEnterMainScene,
	SGE_EnterScene,
	SGE_EnterMainScene,
	SGE_Talk_FirstEnterMainScene,
	SGE_Talk_BattleReady,
	SGE_Talk_ActorReady,
	SGE_Talk_BattleOver,
	SGE_WorldMapOpen,
	SGE_WorldMapToWorld,
	SGE_MiniMapOpen,
	SGE_TeamUIOpen,
	SGE_AchievementUIOpen,
	SGE_AchievementReceived,
	SGE_TeamUISelectMapOpen,
	SGE_PartnerForBattle,
	SGE_PartnerPositionTabShow,
	SGE_PartnerListTabShow,
	SGE_PartnerDetailUIOpen,
	SGE_PartnerDetailBaseOpen,
	SGE_PartnerDetailEquipClick,
	SGE_PartnerDetailEquipSucc,
	SGE_PartnerDetailBaseSkillOpen,
	SGE_ParnterDetailBaseSkillLvUpSucc,
	SGE_MainMakeSub,
	SGE_MainMakeSubDetail,
	SGE_MainMakeItemOk,
	SGE_MainMakeGemUI,
	SGE_MainMakeGemOk,
	SGE_MainMakeGemUIClose,
	SGE_MainTeamUI,
	SGE_MainTaskUI,
	SGE_MainTaskFlushOk,
	SGE_JJCEntryUI,
	SGE_OfflineJJCUI,
	SGE_BagItemDoubleClick,
	SGE_BagFuwenOpen,
	SGE_BagFuwenCombieUI,
	SGE_BagFuwenCombieSuccess,
	SGE_BagFuwenClickTipsInsertBtn,
	SGE_FuwenUIClose,
	SGE_NpcDialogBegin,
	SGE_NpcRenwuUIOpen,
	SGE_NpcRenwuPreAccept,
	SGE_NpcRenwuAccept,
	SGE_NpcRenwuSubmit,
	SGE_EnterNPCBattle,
	SGE_EnterBattle,
	SGE_MessageBoxOpen,
	SGE_BeforeEnterBattle,
	SGE_PlayerLevelUp,
	SGE_PlayerUIOpen,
	SGE_PlayerUIStatusSwitch,
	SGE_PlayerUIPropertySwitch,
	SGE_PlayerUIAddPoint,
	SGE_PlayerUIPropertyConfirmClick,
	SGE_PlayerUIClose,
	SGE_BabyLevelUp,
	SGE_BabyUIOpen,
	SGE_BabyUIStatusSwitch,
	SGE_BabyUIPropertySwitch,
	SGE_BabyUIAddPoint,
	SGE_BabyUIPropertyConfirmClick,
	SGE_BabyUIClose,
	SGE_BattleTurn,
	SGE_ExitBattle,
	SGE_SelectTarget,
	SGE_SelectTargetOk,
	SGE_BabySelectSkill,
	SGE_SelectSkill,
	SGE_SelectSkillLevel,
	SGE_StickDisplay,
	SGE_StickTouchDown,
	SGE_StickTouchMove,
	SGE_StickTouchUp,
	SGE_BattleOverRewardOpen,
	SGE_BattleOverRewardClose,
	SGE_CheckState,
	SGE_TogetherState,
	SGE_BagTipOpen,
	SGE_UseItem,
	SGE_GainItem,
	SGE_EquipItem,
	SGE_MainLearningUI,
	SGE_MainLearningClickTab,
	SGE_MainLearningOneSkillClick,
	SGE_MainLearningSkillOk,
	SGE_MainMakeUIOpen,
	SGE_MainMagicTipClose,
	SGE_MainMagicUIOpen,
	SGE_MainMagicLevelUp,
	SGE_MainMagicFirstClick,
	SGE_PartnerShowUI,
	SGE_PartnerHideUI,
	SGE_BabyLearningSkillUI,
	SGE_BabyLearningSkill_BabyListUI,
	SGE_BabyLearningSkill_BabySkillUI,
	SGE_BabyLearningSkillOk,
	SGE_ClickBabyLearningSkill,
	SGE_ClickMiniQuest,
	SGE_ClickMainBag,
	SGE_ClickMainSkill,
	SGE_ClickMainBaby,
	SGE_ClickMainFriend,
	SGE_ClickMainPartner,
	SGE_ClickMainSetting,
	SGE_ClickMainRecharge,
	SGE_ClickMainActivity,
	SGE_ClickMainInfo,
	SGE_ClickBattleAttack,
	SGE_ClickBattleSkill,
	SGE_ClickBattleBabySkill,
	SGE_ClickBattleDeference,
	SGE_ClickBattleChangePosition,
	SGE_ClickBattleAuto,
	SGE_ClickBattleBag,
	SGE_ClickBattleBaby,
	SGE_ClickBattleRunaway,
	SGE_ClickBattleInfo,
	SGE_ClickAddFriendBtn,
	SGE_ClickMainFamily,
	SGE_ClickRaiseUpBtn,
	SGE_UseItemOk,
	SGE_CheckBuff,
	SGE_PlayerPropUpdate,
	SGE_NpcTalked,
	SGE_EnterCopy,
	SGE_PlayerAutoOrder,
	SGE_OpenAutoPanel,
	SGE_SenseEnter2,
	SGE_WaitTalk,
	SGE_SenseTalked,
	SGE_ExitSense,
	SGE_Max,
};
extern EnumInfo enumScriptGameEvent;
//=============================================================
// enum SenseActorType
enum SenseActorType : S32
{
	SAT_Guard,
	SAT_Ambassdor,
	SAT_King,
	SAT_Yingzi,
	SAT_VillageKing,
	SAT_Archor,
	SAT_Axe,
	SAT_Sage,
	SAT_Mage,
	SAT_Girl,
	SAT_AllMonster,
};
extern EnumInfo enumSenseActorType;
//=============================================================
// enum GameEventType
enum GameEventType : S32
{
	GET_None,
	GET_Online,
	GET_Offline,
	GET_CreatePlayerOK,
	GET_Kill,
	GET_Die,
	GET_LevelUp,
	GET_Flee,
	GET_LearnSkill,
	GET_SkillLevelUp,
	GET_UseSkill,
	GET_EnterJJC,
	GET_MakeEquip,
	GET_RecruitEmp,
	GET_EmployeeEvolve,
	GET_AddBaby,
	GET_DelBaby,
	GET_CatchBaby,
	GET_DepositBaby,
	GET_BabyLevelUp,
	GET_ResetBaby,
	GET_BabyNo,
	GET_BabyLearnSkill,
	GET_AddSkillExp,
	GET_HalfHourAgo,
	GET_Sign,
	GET_BattleChangeProp,
	GET_BattleOver,
	GET_TalkNpc,
	GET_Activity,
	GET_PvR,
	GET_JJC,
	GET_Challenge,
	GET_Zhuanpan,
	GET_Richang,
	GET_Pet,
	GET_Tongji,
	GET_Babyintensify,
	GET_CreateGuild,
	GET_JoinGuild,
	GET_GuildBattleWin,
	GET_GuildBattleLose,
	GET_OpenGuildBattle,
	GET_CloseGuildBattle,
	GET_OpenGuildDemonInvaded,
	GET_CloseGuildDemonInvaded,
	GET_OpenGuildLeaderInvaded,
	GET_CloseGuildLeaderInvaded,
	GET_Exam,
	GET_Wish,
	GET_ChangeMoney,
	GET_ChangeDiamond,
	GET_ChangeMagicCurrency,
	GET_WearEquip,
	GET_AddFleeProp,
	GET_Gather,
	GET_AddFriend,
	GET_ExtendStorage,
	GET_FinishAch,
	GET_AddTeamMemberCondition,
	GET_Shenqishengji,
	GET_NewServer,
	GET_Recharge,
	GET_PhoneNumber,
	GET_ChangeProfession,
	GET_BagFullSendMail,
	GET_WearFuwen,
	GET_Max,
};
extern EnumInfo enumGameEventType;
//=============================================================
// enum SneakAttackType
enum SneakAttackType : S32
{
	SAT_None,
	SAT_SneakAttack,
	SAT_SurpriseAttack,
	SAT_Max,
};
extern EnumInfo enumSneakAttackType;
//=============================================================
// enum ShopType
enum ShopType : S32
{
	SIT_None,
	SIT_FirstRecharge,
	SIT_Recharge,
	SIT_Shop,
	SIT_EmployeeShop,
	SIT_VIP,
	SIT_Fund,
	SIT_Giftbag,
	SIT_CourseGiftBag,
	SIT_Equip,
	SIT_Max,
};
extern EnumInfo enumShopType;
//=============================================================
// enum ShopPayType
enum ShopPayType : S32
{
	SPT_Nil,
	SPT_RMB,
	SPT_Diamond,
	SPT_MagicCurrency,
	SPT_Gold,
};
extern EnumInfo enumShopPayType;
//=============================================================
// enum GuidePointerRotateType
enum GuidePointerRotateType : S32
{
	GPRT_None,
	GPRT_R45,
	GPRT_R90,
	GPRT_R135,
	GPRT_R180,
	GPRT_R225,
	GPRT_R270,
	GPRT_R315,
	GPRT_Max,
};
extern EnumInfo enumGuidePointerRotateType;
//=============================================================
// enum NpcType
enum NpcType : S32
{
	NT_None,
	NT_Normal,
	NT_Tongji,
	NT_SinglePK,
	NT_TeamPK,
	NT_Mogu,
	NT_Xiji,
	NT_Caiji1,
	NT_Caiji2,
	NT_Caiji3,
	NT_Max,
};
extern EnumInfo enumNpcType;
//=============================================================
// enum OpenSubSystemFlag
enum OpenSubSystemFlag : S32
{
	OSSF_None,
	OSSF_Skill,
	OSSF_Baby,
	OSSF_Friend,
	OSSF_EmployeeGet,
	OSSF_EmployeeList,
	OSSF_EmployeePosition,
	OSSF_EmployeeEquip,
	OSSF_Bar,
	OSSF_Castle,
	OSSF_JJC,
	OSSF_PVPJJC,
	OSSF_Make,
	OSSF_Hundred,
	OSSF_Activity,
	OSSF_Handbook,
	OSSF_EveryTask,
	OSSF_Achieve,
	OSSF_Rank,
	OSSF_OnKyTalk,
	OSSF_Setting,
	OSSF_Shop,
	OSSF_DoubleExp,
	OSSF_Family,
	OSSF_AuctionHouse,
	OSSF_BabyLeranSkill,
	OSSF_MagicItem,
	OSSF_EmployeePos10,
	OSSF_EmployeePos15,
	OSSF_EmployeePos20,
	OSSF_Guid,
	OSSF_Team,
	OSSF_choujiang,
	OSSF_Cystal,
	OSSF_PetEquip,
	OSSF_Max,
};
extern EnumInfo enumOpenSubSystemFlag;
//=============================================================
// enum AchievementType
enum AchievementType : S32
{
	AT_None,
	AT_EarnConis,
	AT_SpendMoney,
	AT_SpendDiamond,
	AT_Recharge,
	AT_RoleLevel,
	AT_PetLevel,
	AT_AttackLevel,
	AT_DefenseLevel,
	AT_AgileLevel,
	AT_WearCrystal,
	AT_WearAccessories,
	AT_TotalDamage,
	AT_TotalTreatment,
	AT_HasSkillNum,
	AT_BabySkill,
	AT_CatchPet,
	AT_RecruitPartner,
	AT_PartnerCard,
	AT_PartnersUpgradeGreen,
	AT_PartnersUpgradeBlue,
	AT_PartnersUpgradePurple,
	AT_PartnersUpgradeGold,
	AT_PartnersUpgradeOrangle,
	AT_PartnersUpgradePink,
	AT_QualifyingAdvanced,
	AT_ArenaWin,
	AT_KillMonster,
	AT_KillBoss,
	AT_KillPlayer,
	AT_MakeEquipment,
	AT_Reward50,
	AT_EverydayActivities,
	AT_Sign,
	AT_Wanted,
	AT_Copy30,
	AT_Copy40,
	AT_Blood,
	AT_Magic,
	AT_Bag,
	AT_PetBag,
	AT_GoodMake,
	AT_PetIntensive,
	AT_PetHuman,
	AT_PetInsect,
	AT_PetPlant,
	AT_PetExtra,
	AT_PetDragon,
	AT_PetAnimal,
	AT_PetFly,
	AT_PetUndead,
	AT_PetMetal,
	AT_Home,
	AT_CollectMaterial,
	AT_Friend,
	AT_Billboard,
	AT_OwnConis,
	AT_MagicEquip,
	AT_RunesLevel,
	AT_Max,
};
extern EnumInfo enumAchievementType;
//=============================================================
// enum CategoryType
enum CategoryType : S32
{
	ACH_All,
	ACH_Growup,
	ACH_Battle,
	ACH_Pet,
	ACH_Partner,
	ACH_Illustrations,
	ACH_Max,
};
extern EnumInfo enumCategoryType;
//=============================================================
// enum ClassifyType
enum ClassifyType : S32
{
	SD_Debris,
	SD_Data,
	SD_Pet,
	SD_Fashion,
	SD_Diamond,
	SD_1Ji,
	SD_2Ji,
};
extern EnumInfo enumClassifyType;
//=============================================================
// enum FunctionalPointType
enum FunctionalPointType : S32
{
	FPT_None,
	FPT_Tongji,
	FPT_Mogu,
	FPT_Xiji,
	FPT_Npc,
	FPT_Max,
};
extern EnumInfo enumFunctionalPointType;
//=============================================================
// enum ActivityType
enum ActivityType : S32
{
	ACT_None,
	ACT_Tongji,
	ACT_Mogu,
	ACT_Richang,
	ACT_Pet,
	ACT_AlonePK,
	ACT_TeamPK,
	ACT_JJC,
	ACT_Challenge,
	ACT_Exam,
	ACT_Copy,
	ACT_Xuyuan,
	ACT_Family_0,
	ACT_Family_1,
	ACT_Family_2,
	ACT_Family_3,
	ACT_Family_4,
	ACT_Warrior,
	ACT_Money,
	ACT_Rand,
	ACT_Max,
};
extern EnumInfo enumActivityType;
//=============================================================
// enum MailType
enum MailType : S32
{
	MT_Normal,
	MT_System,
};
extern EnumInfo enumMailType;
//=============================================================
// enum HelpType
enum HelpType : S32
{
	HT_None,
	HT_Money,
	HT_Diamond,
	HT_Role,
	HT_Baby,
	HT_Employee,
	HT_Skill,
	HT_Exp,
	HT_Magic,
	HT_Equip,
};
extern EnumInfo enumHelpType;
//=============================================================
// enum GuildJob
enum GuildJob : S32
{
	GJ_None,
	GJ_People,
	GJ_Minister,
	GJ_SecretaryHead,
	GJ_VicePremier,
	GJ_Premier,
	GJ_Max,
};
extern EnumInfo enumGuildJob;
//=============================================================
// enum ModifyListFlag
enum ModifyListFlag : S32
{
	MLF_Add,
	MLF_Delete,
	MLF_ChangeOnline,
	MLF_ChangeOffline,
	MLF_ChangePosition,
	MLF_ChangeContribution,
	MLF_ChangeLevel,
	MLF_ChangeProfession,
	MLF_ChangeGuuildBattleCon,
};
extern EnumInfo enumModifyListFlag;
//=============================================================
// enum GuildBuildingType
enum GuildBuildingType : S32
{
	GBT_MIN,
	GBT_Main,
	GBT_Bank,
	GBT_Shop,
	GBT_Collection,
	GBT_Goddess,
	GBT_Progenitus,
	GBT_MAX,
};
extern EnumInfo enumGuildBuildingType;
//=============================================================
// enum SellItemType
enum SellItemType : S32
{
	SelIT_None,
	SelIT_Max,
};
extern EnumInfo enumSellItemType;
//=============================================================
// enum DiamondConfigClass
enum DiamondConfigClass : S32
{
	DBT_Type_None,
	DBT_Type_Mine_Famu,
	DBT_Type_Mine_Caikuang,
	DBT_Type_Mine_Zhibu,
	DBT_Type_Max,
};
extern EnumInfo enumDiamondConfigClass;
//=============================================================
// enum DiamondConfigType
enum DiamondConfigType : S32
{
	DBT_None,
	DBT_Day,
	DBT_Week,
	DBT_Month,
	DBT_Max,
};
extern EnumInfo enumDiamondConfigType;
//=============================================================
// enum FixType
enum FixType : S32
{
	FT_None,
	FT_Money,
	FT_Diamond,
	FT_Max,
};
extern EnumInfo enumFixType;
//=============================================================
// enum StorageType
enum StorageType : S32
{
	ST_Item,
	ST_Baby,
};
extern EnumInfo enumStorageType;
//=============================================================
// enum EmployeesBattleGroup
enum EmployeesBattleGroup : S32
{
	EBG_None,
	EBG_Free,
	EBG_GroupOne,
	EBG_GroupTwo,
	EBG_Max,
};
extern EnumInfo enumEmployeesBattleGroup;
//=============================================================
// enum GiftType
enum GiftType : S32
{
	GFT_Bug,
	GFT_UC1,
	GFT_UC2,
	GFT_Group,
};
extern EnumInfo enumGiftType;
//=============================================================
// enum GMT_Protocol
enum GMT_Protocol : S32
{
	GMT_None,
	GMT_GMCommand,
	GMT_Notice,
	GMT_InsertMail,
	GMT_QueryPlayer,
	GMT_LoginActivity,
	GMT_7Days,
	GMT_Cards,
	GMT_ExtractEmployee,
	GMT_ChargeTotal,
	GMT_ChargeEvery,
	GMT_DiscountStore,
	GMT_Foundation,
	GMT_LoginTotal,
	GMT_OnlineReward,
	GMT_HotRole,
	GMT_SelfChargeTotal,
	GMT_SelfChargeEvery,
	GMT_MinGiftBag,
	GMT_DoScript,
	GNT_MakeOrder,
	GMT_Zhuanpan,
	GMT_IntegralShop,
	GMT_QueryRoleList,
	GMT_QueryRMB,
	GMT_QueryDia,
	GMT_QueryMoney,
	GMT_MAX,
};
extern EnumInfo enumGMT_Protocol;
//=============================================================
// enum GMCommandType
enum GMCommandType : S32
{
	GMCT_NoTalk,
	GMCT_Freeze,
	GMCT_Seal,
	GMCT_Kick,
	GMCT_OpenTalk,
	GMCT_Unseal,
	GMCT_SkipGuide,
	GMCT_AddMoney,
	GMCT_AddDiamond,
	GMCT_AddExp,
	GMCT_OpenGM,
	GMCT_CloseGM,
	GMCT_DoScript,
	GMCT_Max,
};
extern EnumInfo enumGMCommandType;
//=============================================================
// enum NoticeSendType
enum NoticeSendType : S32
{
	NST_Immediately,
	NST_Timming,
	NST_Loop,
};
extern EnumInfo enumNoticeSendType;
//=============================================================
// enum InsertMailType
enum InsertMailType : S32
{
	IGMT_PlayerId,
	IGMT_AllOnline,
	IGMT_AllRegist,
};
extern EnumInfo enumInsertMailType;
//=============================================================
// enum ItemContainerType
enum ItemContainerType : S32
{
	ICT_EquipContainer,
	ICT_BagContainer,
};
extern EnumInfo enumItemContainerType;
//=============================================================
// enum UIBehaviorType
enum UIBehaviorType : S32
{
	UBT_None,
	UBT_Bag,
	UBT_Baby,
	UBT_Employee,
	UBT_SkillView,
	UBT_SkillLearn,
	UBT_Task,
	UBT_Make,
	UBT_Gather,
	UBT_MagicItem,
	UBT_Store,
	UBT_Help,
	UBT_Friend,
	UBT_Email,
	UBT_Auction,
	UBT_Activity,
	UBT_SignUp,
	UBT_EmployessList,
	UBT_EmployessPos,
	UBT_EmployessTavern,
	UBT_PlayerProperty,
	UBT_Max,
};
extern EnumInfo enumUIBehaviorType;
//=============================================================
// enum HelpRaiseType
enum HelpRaiseType : S32
{
	HRT_None,
	HRT_PlayerAddProp,
	HRT_PlayerResetProp,
	HRT_PlayerAddEvolve,
	HRT_BabyAddProp,
	HRT_BabyReset,
	HRT_BabyStr,
	HRT_BabySkill,
	HRT_BabyChange,
	HRT_SkillAuto,
	HRT_SkillItem,
	HRT_EquipCompound,
	HRT_EquipGem,
	HRT_EmployeeBuy,
	HRT_EmployeePos,
	HRT_EmployeeSkill,
	HRT_EmployeeEquip,
	HRT_EmployeeEvolve,
	HRT_MagicLevelUp,
	HRT_MagicEvolve,
	HRT_Max,
};
extern EnumInfo enumHelpRaiseType;
//=============================================================
// enum SceneFilterType
enum SceneFilterType : S32
{
	SFT_None,
	SFT_Team,
	SFT_Friend,
	SFT_Guild,
	SFT_All,
	SFT_Max,
};
extern EnumInfo enumSceneFilterType;
//=============================================================
// enum GatherStateType
enum GatherStateType : S32
{
	GST_None,
	GST_Vulgar,
	GST_Advanced,
	GST_Max,
};
extern EnumInfo enumGatherStateType;
//=============================================================
// enum WishType
enum WishType : S32
{
	WIT_None,
	WIT_Exp,
	WIT_Money,
	WIT_Baby,
	WIT_Employee,
	WIT_Max,
};
extern EnumInfo enumWishType;
//=============================================================
// enum ADType
enum ADType : S32
{
	ADT_None,
	ADT_7Days,
	ADT_Cards,
	ADT_ChargeTotal,
	ADT_ChargeEvery,
	ADT_DiscountStore,
	ADT_Foundation,
	ADT_LoginTotal,
	ADT_OnlineReward,
	ADT_HotRole,
	ADT_SelfChargeTotal,
	ADT_SelfChargeEvery,
	ADT_SelfDiscountStore,
	ADT_BuyEmployee,
	ADT_PhoneNumber,
	ADT_Level,
	ADT_Sign,
	ADT_GiftBag,
	ADT_Zhuanpan,
	ADT_IntegralShop,
	ADT_Max,
};
extern EnumInfo enumADType;
//=============================================================
// enum EmployeeSkillType
enum EmployeeSkillType : S32
{
	EKT_GroupDamage,
	EKT_DeadlyDamage,
	EKT_BattleTimeLimit,
	EKT_Thump,
	EKT_SiegeDamage,
	EKT_SuperMagic,
	EKT_Debuff,
	EKT_PhysicalDefense,
	EKT_Max,
};
extern EnumInfo enumEmployeeSkillType;
//=============================================================
// enum EmployeeQuestColor
enum EmployeeQuestColor : S32
{
	EQC_White,
	EQC_Blue,
	EQC_Purple,
	EQC_Max,
};
extern EnumInfo enumEmployeeQuestColor;
//=============================================================
// enum EmployeeQuestStatus
enum EmployeeQuestStatus : S32
{
	EQS_None,
	EQS_Running,
	EQS_Complate,
};
extern EnumInfo enumEmployeeQuestStatus;
//=============================================================
// enum RobotActionType
enum RobotActionType : S32
{
	RAT_None,
	RAT_Resting,
	RAT_Move,
	RAT_QuestMove,
	RAT_TeamMove,
	RAT_Max,
};
extern EnumInfo enumRobotActionType;
#endif
